package org.example;

import com.microsoft.playwright.*;
import com.microsoft.playwright.options.LoadState;
import com.microsoft.playwright.options.WaitForSelectorState;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Test;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * v2_MOBI_id_authorization_fastgames
 * –ú–æ–±–∏–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫, –µ—Å–ª–∏ —É–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω) + —Ä–∞–∑–¥–µ–ª "–ë—ã—Å—Ç—Ä—ã–µ –∏–≥—Ä—ã" (—Å–µ—Ä–∏—è –∏–≥—Ä).
 * –ë–ª–æ–∫ Google Messages ‚Äî —Ä–æ–≤–Ω–æ –∫–∞–∫ –≤ —ç—Ç–∞–ª–æ–Ω–µ (–Ω–µ –º–µ–Ω—è—Ç—å).
 *
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
 * - –õ–æ–≥–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
 * - –¢–µ–ª–µ–≥—Ä–∞–º-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è tg.sendMessage / tg.sendPhoto
 * - –°–∫—Ä–∏–Ω—à–æ—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —á–µ—Ä–µ–∑ ScreenshotHelper
 * - –ù–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –≤ –∫–æ–Ω—Ü–µ
 * - –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å BaseTest, JUnit 5, Playwright 1.48+, JDK 24
 */
public class v2_MOBI_id_authorization_fastgames_–ü–†–û–¶–ï–°–° extends BaseTest {

    // ========================== –• –ï –õ –ü –ï –† –´ (SPA + iframe + –≤–∫–ª–∞–¥–∫–∏) ==========================

    static void waitForPageOrReload(int maxWaitMs) {
        int waited = 0;
        while (true) {
            try {
                String readyState = (String) page.evaluate("() => document.readyState");
                if ("complete".equals(readyState)) break;
                Thread.sleep(500);
                waited += 500;
                if (waited >= maxWaitMs) {
                    System.out.println("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∑–∞ " + maxWaitMs + " –º—Å, –æ–±–Ω–æ–≤–ª—è–µ–º!");
                    page.reload();
                    waited = 0;
                }
            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏: " + e.getMessage());
                page.reload();
                waited = 0;
            }
        }
    }

    static void tgStep(String message, boolean success) {
        String icon = success ? "‚úÖ" : "‚ùå";
        System.out.println(icon + " " + message);
        try { tg.sendMessage(icon + " " + message); } catch (Exception ignore) {}
    }

    private static void robustClick(Page p, Locator loc, int timeoutMs, String debugName) {
        long deadline = System.currentTimeMillis() + timeoutMs;
        RuntimeException lastErr = null;
        while (System.currentTimeMillis() < deadline) {
            try {
                loc.first().scrollIntoViewIfNeeded();
                loc.first().click(new Locator.ClickOptions().setTimeout(2500));
                return;
            } catch (RuntimeException e1) {
                lastErr = e1;
                String msg = e1.getMessage();
                if (msg != null && (msg.contains("intercepts pointer events")
                        || msg.contains("not visible") || msg.contains("timeout"))) {
                    try {
                        loc.first().click(new Locator.ClickOptions().setTimeout(1500).setForce(true));
                        return;
                    } catch (RuntimeException e2) {
                        lastErr = e2;
                        try {
                            loc.first().evaluate("el => el.dispatchEvent(new MouseEvent('click', {bubbles:true, cancelable:true}))");
                            return;
                        } catch (RuntimeException e3) { lastErr = e3; }
                    }
                }
            }
            p.waitForTimeout(200);
        }
        if (lastErr != null) throw new RuntimeException("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å: " + debugName + " ‚Äî " + lastErr.getMessage(), lastErr);
        throw new RuntimeException("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å: " + debugName);
    }

    /** –ò—â–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –≤–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≤–æ –≤—Å–µ—Ö iframe */
    private static Frame findFrameWithSelector(Page p, String selector, int timeoutMs) {
        long deadline = System.currentTimeMillis() + timeoutMs;
        while (System.currentTimeMillis() < deadline) {
            for (Page pg : p.context().pages()) {
                for (Frame f : pg.frames()) {
                    try {
                        if (f.locator(selector).count() > 0) {
                            System.out.println("[DEBUG] –ù–∞—à–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –≤–æ —Ñ—Ä–µ–π–º–µ: " + f.url());
                            return f;
                        }
                    } catch (Throwable ignore) {}
                }
            }
            p.waitForTimeout(250);
        }
        return null;
    }

    /** –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ —Ç–µ–∫—É—â–µ–º page, –∏–Ω–∞—á–µ ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä—ã–≥–∞–µ–º –≤ –Ω—É–∂–Ω—ã–π iframe */
    private static Locator smartLocator(Page p, String selector, int timeoutMs) {
        Locator direct = p.locator(selector);
        if (direct.count() > 0) return direct;
        Frame f = findFrameWithSelector(p, selector, timeoutMs);
        if (f != null) return f.locator(selector);
        throw new RuntimeException("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–¥–∞–∂–µ –≤–æ —Ñ—Ä–µ–π–º–∞—Ö): " + selector);
    }

    /** –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ –∏–≥—Ä—ã: –ª–æ–≤–∏–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã–ª–∞—Å—å */
    private static Page clickCardMaybeOpensNewTab(Locator card) {
        int before = page.context().pages().size();
        Page maybeNew = null;
        try {
            // –ñ–¥—ë–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è
            maybeNew = page.context().waitForPage(
                    () -> robustClick(page, card.first(), 15000, "–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä—ã")
            );
        } catch (PlaywrightException ignore) {
            // –ï—Å–ª–∏ –Ω–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º –≤ —Ç–µ–∫—É—â–µ–π
        }
        page.waitForTimeout(600);
        int after = page.context().pages().size();
        if (maybeNew != null) {
            maybeNew.bringToFront();
            return maybeNew;
        } else if (after > before) {
            Page newPage = page.context().pages().get(after - 1);
            newPage.bringToFront();
            return newPage;
        }
        // –ò–≥—Ä–∞ –æ—Ç–∫—Ä—ã–ª–∞—Å—å –≤ —Ç–æ–π –∂–µ –≤–∫–ª–∞–¥–∫–µ
        return page;
    }

    // ================================== –¢ –ï –° –¢ ==================================

    @Test
    void loginAndPlayFastGames() {
        long startTime = System.currentTimeMillis();
        tg.sendMessage("üöÄ *–¢–µ—Å—Ç v2_MOBI_id_authorization_fastgames* —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è + –±—ã—Å—Ç—Ä—ã–µ –∏–≥—Ä—ã)");

        try {
            // --- –û–¢–ö–†–´–¢–ò–ï –°–ê–ô–¢–ê ---
            System.out.println("–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Å–∞–π—Ç–∞ 1xbet.kz");
            page.navigate("https://1xbet.kz/?platform_type=mobile");
            waitForPageOrReload(10000);
            page.waitForLoadState(LoadState.NETWORKIDLE);
            page.waitForTimeout(2000);

            // ---- –ü–†–û–í–ï–†–ö–ê: –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç ----
            boolean isAuthorized = false;
            System.out.println("–ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç...");

            try {
                Locator profileButton = page.locator(
                        "button.user-header__link.header__link.header__reg.header__reg_ico.ion-android-person"
                );
                profileButton.waitFor(new Locator.WaitForOptions().setTimeout(15000).setState(WaitForSelectorState.VISIBLE));
                profileButton.click();
                page.waitForTimeout(2000);

                Locator logoutButton = page.locator("button.drop-menu-list__link_exit");
                if (logoutButton.isVisible()) {
                    isAuthorized = true;
                    System.out.println("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º '–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ '–õ–∏–Ω–∏—è'...");

                    Locator personalDataLink = page.locator("a.drop-menu-list__link_lk:has-text('–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')");
                    personalDataLink.waitFor(new Locator.WaitForOptions().setTimeout(10000).setState(WaitForSelectorState.VISIBLE));
                    try {
                        personalDataLink.click();
                        System.out.println("üîπ –†–∞–∑–¥–µ–ª '–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' –æ—Ç–∫—Ä—ã—Ç ‚úÖ");
                    } catch (Exception e1) {
                        page.evaluate("document.querySelector('a.drop-menu-list__link_lk[href=\"/ru/office/account\"]')?.click()");
                        System.out.println("‚úÖ –ü–µ—Ä–µ—à–ª–∏ –≤ '–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' —á–µ—Ä–µ–∑ JS");
                    }

                    page.waitForLoadState(LoadState.NETWORKIDLE);
                    page.waitForTimeout(1500);

                    // --- –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é ---
                    Locator burgerMenu = page.locator("button.header__hamburger.hamburger");
                    burgerMenu.waitFor(new Locator.WaitForOptions().setTimeout(10000).setState(WaitForSelectorState.VISIBLE));
                    burgerMenu.click();
                    page.waitForTimeout(1000);
                    System.out.println("üçî –ë—É—Ä–≥–µ—Ä-–º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ");

                    // --- –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–∑–¥–µ–ª '–õ–∏–Ω–∏—è' ---
                    Locator lineLink = page.locator("a.drop-menu-list__link:has-text('–õ–∏–Ω–∏—è')");
                    lineLink.waitFor(new Locator.WaitForOptions().setTimeout(10000).setState(WaitForSelectorState.VISIBLE));
                    try {
                        lineLink.click();
                        System.out.println("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª '–õ–∏–Ω–∏—è' –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                    } catch (Exception e2) {
                        page.evaluate("document.querySelector('a.drop-menu-list__link[href=\"/ru/line\"]')?.click()");
                        System.out.println("‚úÖ –ü–µ—Ä–µ—à–ª–∏ –≤ '–õ–∏–Ω–∏—è' —á–µ—Ä–µ–∑ JS");
                    }

                    page.waitForLoadState(LoadState.NETWORKIDLE);
                    page.waitForTimeout(2000);
                }

            } catch (PlaywrightException e) {
                System.out.println("‚è≥ –ö–Ω–æ–ø–∫–∞ '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.");
            }

            // ---- –ï–°–õ–ò –ù–ï –ê–í–¢–û–†–ò–ó–û–í–ê–ù ‚Äî –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ----
            if (!isAuthorized) {
                System.out.println("üîê –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...");

                page.click("button#curLoginForm >> text=–í–æ–π—Ç–∏");
                page.waitForTimeout(1000);

                page.fill("input#auth_id_email", ConfigHelper.get("login"));
                page.fill("input#auth-form-password", ConfigHelper.get("password"));
                page.click("button.auth-button:has(span.auth-button__text:has-text('–í–æ–π—Ç–∏'))");

                System.out.println("–¢–µ–ø–µ—Ä—å —Ä–µ—à–∞–π –∫–∞–ø—á—É –≤—Ä—É—á–Ω—É—é ‚Äî –∂–¥—É –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ '–í—ã—Å–ª–∞—Ç—å –∫–æ–¥' (–¥–æ 10 –º–∏–Ω—É—Ç)...");
                page.waitForSelector("button:has-text('–í—ã—Å–ª–∞—Ç—å –∫–æ–¥')",
                        new Page.WaitForSelectorOptions().setTimeout(600_000).setState(WaitForSelectorState.VISIBLE));
                System.out.println("–ö–Ω–æ–ø–∫–∞ '–í—ã—Å–ª–∞—Ç—å –∫–æ–¥' –ø–æ—è–≤–∏–ª–∞—Å—å ‚úÖ");

                page.click("button:has-text('–í—ã—Å–ª–∞—Ç—å –∫–æ–¥')");
                page.waitForTimeout(2000);

                page.waitForSelector("input.phone-sms-modal-code__input",
                        new Page.WaitForSelectorOptions().setTimeout(600_000).setState(WaitForSelectorState.VISIBLE));
                System.out.println("–ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ—è–≤–∏–ª–æ—Å—å ‚úÖ");

                // --- GOOGLE MESSAGES (—ç—Ç–∞–ª–æ–Ω–Ω—ã–π –±–ª–æ–∫ ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å) ---
                System.out.println("üì® –û—Ç–∫—Ä—ã–≤–∞–µ–º Google Messages —Å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π...");
                Page messagesPage = context.newPage();
                messagesPage.navigate("https://messages.google.com/web/conversations");
                messagesPage.waitForLoadState(LoadState.DOMCONTENTLOADED);
                messagesPage.waitForTimeout(3000);

                if (messagesPage.url().contains("welcome")) {
                    throw new RuntimeException("‚ö†Ô∏è –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Google Messages! –ù—É–∂–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤—Ä—É—á–Ω—É—é –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR.");
                }

                // ---- –ñ–î–Å–ú –ó–ê–ì–†–£–ó–ö–ò –°–ü–ò–°–ö–ê –ß–ê–¢–û–í ----
                System.out.println("–¢–µ–ø–µ—Ä—å –ø–æ–¥–æ–∂–¥–∏ ‚Äî Google Messages –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è (–¥–æ 10 –º–∏–Ω—É—Ç)...");
                try {
                    messagesPage.waitForSelector("mws-conversation-list-item",
                            new Page.WaitForSelectorOptions()
                                    .setTimeout(600_000) // –º–∞–∫—Å–∏–º—É–º 10 –º–∏–Ω—É—Ç
                                    .setState(WaitForSelectorState.VISIBLE)
                    );
                    System.out.println("‚úÖ –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è");
                } catch (PlaywrightException e) {
                    throw new RuntimeException("‚ùå –ß–∞—Ç—ã –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤ Google Messages ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∏–ª–∏ —Å–µ—Ç—å —Ç–æ—Ä–º–æ–∑–∏—Ç");
                }

                System.out.println("üîç –ò—â–µ–º —á–∞—Ç —Å 1xBet...");
                Locator chat = messagesPage.locator("mws-conversation-list-item:has-text('1xbet'), mws-conversation-list-item:has-text('1xbet-kz')");
                if (chat.count() == 0) {
                    System.out.println("‚ö†Ô∏è –ß–∞—Ç 1xBet –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–ª–∏–∫–∞–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É –≤ —Å–ø–∏—Å–∫–µ");
                    chat = messagesPage.locator("mws-conversation-list-item").first();
                }
                chat.first().click();
                System.out.println("üí¨ –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç");
                messagesPage.waitForTimeout(3000);

                System.out.println("üì© –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...");
                Locator messageNodes = messagesPage.locator("div.text-msg-content div.text-msg.msg-content div.ng-star-inserted");
                int count = 0;
                for (int i = 0; i < 15; i++) {
                    count = messageNodes.count();
                    if (count > 0) break;
                    messagesPage.waitForTimeout(1000);
                }
                if (count == 0)
                    throw new RuntimeException("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ —á–∞—Ç–∞!");
                String lastMessageText = messageNodes.nth(count - 1).innerText().trim();
                System.out.println("üì® –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: " + lastMessageText);

                Matcher matcher = Pattern.compile("\\b[a-zA-Z0-9]{4,8}\\b").matcher(lastMessageText);
                String code = matcher.find() ? matcher.group() : null;
                if (code == null)
                    throw new RuntimeException("‚ùå –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏!");
                System.out.println("‚úÖ –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π –∫–æ–¥: " + code);

                page.bringToFront();
                page.fill("input.phone-sms-modal-code__input", code);
                page.click("button.phone-sms-modal-content__send:has-text('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')");
                page.waitForTimeout(3000);
                System.out.println("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ");

                try {
                    tg.sendMessage("üì¨ –ö–æ–¥ –∏–∑ Google Messages: *" + code + "*");
                    System.out.println("üì® –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram ‚úÖ");
                } catch (Exception tgErr) {
                    System.out.println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: " + tgErr.getMessage());
                }
            }

            // --- –ü–ï–†–ï–•–û–î –ö –ë–´–°–¢–†–´–ú –ò–ì–†–ê–ú ---
            System.out.println("üéØ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ '–ë—ã—Å—Ç—Ä—ã–µ –∏–≥—Ä—ã'");
            page.click("button.header__hamburger.hamburger");
            page.waitForTimeout(1000);
            page.click("a[href*='fast-games']");

// –∂–¥—ë–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–µ—Ç—å
            page.waitForSelector("div.tile__cell img, div.tile__cell",
                    new Page.WaitForSelectorOptions().setTimeout(30_000).setState(WaitForSelectorState.VISIBLE));
            page.waitForTimeout(1200);
            System.out.println("‚úÖ –†–∞–∑–¥–µ–ª '–ë—ã—Å—Ç—Ä—ã–µ –∏–≥—Ä—ã' –æ—Ç–∫—Ä—ã—Ç ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∏–≥—Ä...");

// ====================== –ò –ì –† –´ ======================

// 1) –ö—Ä—ç—à-–ë–æ–∫—Å
            {
                Page gamePage = openGameFromLobbyByName(page, "Crash boxing", "crash");
                passTutorialIfPresent(gamePage);
                setStake50(gamePage);
                clickFirstEnabled(gamePage, "div[role='button'][data-market='hit_met_condition'][data-outcome='yes']", 30_000, "Crash: –∏—Å—Ö–æ–¥ 1");
                clickFirstEnabled(gamePage, "div[role='button'][data-market='hit_met_condition'][data-outcome='yes_2']", 30_000, "Crash: –∏—Å—Ö–æ–¥ 2");
                waitRoundToSettle(gamePage, 25_000);
                System.out.println("üéÆ Crash boxing –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ");

                // –ø—Ä–æ–±—É–µ–º —Å—Ä–∞–∑—É –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ù–∞—Ä–¥—ã
                if (!switchToGameByTitle(gamePage, "–ù–∞—Ä–¥—ã")) {
                    backToLobby(gamePage);
                    page.waitForTimeout(1500);
                }
            }

// 2) –ù–∞—Ä–¥—ã
            {
                Page gamePage = page;
                passTutorialIfPresent(gamePage);
                setStake50(gamePage);
                clickFirstEnabled(gamePage, "span[role='button'][data-market='dice'][data-outcome='blue']", 25_000, "–ù–∞—Ä–¥—ã: —Å–∏–Ω–∏–π");
                waitRoundToSettle(gamePage, 25_000);
                System.out.println("üéØ –ù–∞—Ä–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã ‚úÖ");

                if (!switchToGameByTitle(gamePage, "–î–∞—Ä—Ç—Å")) {
                    backToLobby(gamePage);
                    page.waitForTimeout(1500);
                }
            }

// 3) –î–∞—Ä—Ç—Å
            {
                Page gamePage = page;
                passTutorialIfPresent(gamePage);
                setStake50(gamePage);
                clickFirstEnabled(gamePage, "span[role='button'][data-market='1-4-5-6-9-11-15-16-17-19']", 25_000, "–î–∞—Ä—Ç—Å: –∫–æ–º–±–æ");
                waitRoundToSettle(gamePage, 25_000);
                System.out.println("üéØ –î–∞—Ä—Ç—Å –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ");

                if (!switchToGameByTitle(gamePage, "–î–∞—Ä—Ç—Å - –§–æ—Ä—Ç—É–Ω–∞")) {
                    backToLobby(gamePage);
                    page.waitForTimeout(1500);
                }
            }

// 4) –î–∞—Ä—Ç—Å - –§–æ—Ä—Ç—É–Ω–∞
            {
                Page gamePage = page;
                passTutorialIfPresent(gamePage);
                setStake50(gamePage);
                clickFirstEnabled(gamePage, "div[data-outcome='ONE_TO_EIGHT']", 25_000, "–î–∞—Ä—Ç—Å-–§–æ—Ä—Ç—É–Ω–∞: 1-8");
                waitRoundToSettle(gamePage, 25_000);
                System.out.println("üéØ –î–∞—Ä—Ç—Å-–§–æ—Ä—Ç—É–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ");

                if (!switchToGameByTitle(gamePage, "–ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ")) {
                    backToLobby(gamePage);
                    page.waitForTimeout(1500);
                }
            }

// 5) –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ
            {
                Page gamePage = page;
                passTutorialIfPresent(gamePage);
                setStake50(gamePage);
                clickFirstEnabled(gamePage,
                        "div[role='button'][data-market][data-outcome]:has-text('–ë–æ–ª—å—à–µ'), button:has-text('–ë–æ–ª—å—à–µ')",
                        45_000, "Hi/Lo: –ë–æ–ª—å—à–µ");
                waitRoundToSettle(gamePage, 30_000);
                System.out.println("üéØ –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ");

                if (!switchToGameByTitle(gamePage, "–ë—É–ª–ª–∏—Ç—ã NHL21")) {
                    backToLobby(gamePage);
                    page.waitForTimeout(1500);
                }
            }

// 6) –ë—É–ª–ª–∏—Ç—ã NHL21
            {
                Page gamePage = page;
                passTutorialIfPresent(gamePage);
                setStake50(gamePage);
                clickFirstEnabled(gamePage,
                        "div[role='button'].market-button:has-text('–î–∞'), button.market-button:has-text('–î–∞')",
                        45_000, "–ë—É–ª–ª–∏—Ç—ã: –î–∞");
                waitRoundToSettle(gamePage, 35_000);
                System.out.println("üéØ –ë—É–ª–ª–∏—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã ‚úÖ");

                if (!switchToGameByTitle(gamePage, "–ë–æ–∫—Å")) {
                    backToLobby(gamePage);
                    page.waitForTimeout(1500);
                }
            }

// 7) –ë–æ–∫—Å
            {
                Page gamePage = page;
                passTutorialIfPresent(gamePage);
                setStake50(gamePage);
                clickFirstEnabled(gamePage,
                        "div[role='button'].contest-panel-outcome-button, button.contest-panel-outcome-button",
                        25_000, "–ë–æ–∫—Å: –∏—Å—Ö–æ–¥");
                waitRoundToSettle(gamePage, 20_000);
                System.out.println("üéØ –ë–æ–∫—Å –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ");
            }


            // ---------- –§–ò–ù–ê–õ ----------
            long duration = (System.currentTimeMillis() - startTime) / 1000;
            tg.sendMessage("üéØ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ*\n" +
                    "‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: " + (isAuthorized ? "—É–∂–µ –±—ã–ª–∞" : "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞") + "\n" +
                    "‚Ä¢ –í—Å–µ –±—ã—Å—Ç—Ä—ã–µ –∏–≥—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã ‚úÖ\n" +
                    "üïí –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: *" + duration + " —Å–µ–∫.* ‚úÖ");

        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
            String screenshotPath = ScreenshotHelper.takeScreenshot(page, "v2_MOBI_id_authorization_fastgames_error");
            try {
                tg.sendMessage("üö® –û—à–∏–±–∫–∞ –≤ *v2_MOBI_id_authorization_fastgames*:\n" + e.getMessage());
                if (screenshotPath != null) tg.sendPhoto(screenshotPath, "–°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏");
            } catch (Exception ignore) {}
        }

        System.out.println("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ (–±—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞—ë—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º)");
    }

    // --- –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ú–ï–ñ–î–£ –ò–ì–†–ê–ú–ò –ß–ï–†–ï–ó –¢–û–ß–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï –ù–ê–ó–í–ê–ù–ò–Ø ---
    private static boolean switchToGameByTitle(Page gamePage, String gameName) {
        try {
            Locator titleButton = gamePage.locator(
                    "span.w-100.text-hub-header-game-title"
            ).filter(new Locator.FilterOptions().setHasText(gameName));
            if (titleButton.count() > 0 && titleButton.first().isVisible()) {
                System.out.println("üîÅ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∏–≥—Ä—É: " + gameName + " —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–æ–∫");
                titleButton.first().scrollIntoViewIfNeeded();
                titleButton.first().click();
                gamePage.waitForLoadState(LoadState.NETWORKIDLE);
                gamePage.waitForSelector("div.chip-text, div[role='button'], span[role='button']",
                        new Page.WaitForSelectorOptions().setTimeout(15_000).setState(WaitForSelectorState.VISIBLE));
                gamePage.waitForTimeout(1200);
                System.out.println("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –∏–≥—Ä—É: " + gameName);
                return true;
            } else {
                System.out.println("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '" + gameName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ª–æ–±–±–∏");
            }
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ '" + gameName + "': " + e.getMessage());
        }
        return false;
    }

    // --- –û–ñ–ò–î–ê–ù–ò–ï –ù–ê–ß–ê–õ–ê –†–ê–£–ù–î–ê (–µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã) ---
    private static void waitForRoundStart(Page gamePage, int maxWaitMs) {
        System.out.println("‚åõ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∞–ª—Å—è –ª–∏ –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ (–¥–æ " + (maxWaitMs / 1000) + " —Å–µ–∫)...");
        long start = System.currentTimeMillis();
        while (System.currentTimeMillis() - start < maxWaitMs) {
            try {
                Locator anyBet = gamePage.locator(
                        "div[role='button'][data-market][data-outcome]:has-text('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É'), " +
                                "button:has-text('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É'), " +
                                "div.market-button:has-text('–î–∞'), " +
                                "div[role='button'].contest-panel-outcome-button"
                );
                if (anyBet.count() > 0 && anyBet.first().isVisible()) {
                    boolean enabled = (Boolean) anyBet.first().evaluate(
                            "e => {" +
                                    "const s = getComputedStyle(e);" +
                                    "return !e.closest('[disabled]') && s.pointerEvents!=='none' && s.visibility!=='hidden';" +
                                    "}"
                    );
                    if (enabled) {
                        System.out.println("‚úÖ –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã ‚Äî –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ –Ω–∞—á–∞–ª—Å—è!");
                        return;
                    }
                }
            } catch (Exception ignore) {}
            gamePage.waitForTimeout(1000);
        }
        System.out.println("‚ö†Ô∏è –ù–µ –¥–æ–∂–¥–∞–ª–∏—Å—å –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç");
    }

    // --- –£–ú–ù–´–ô –ö–õ–ò–ö –° –ü–û–õ–ù–û–ô –ü–†–û–í–ï–†–ö–û–ô –î–û–°–¢–£–ü–ù–û–°–¢–ò ---
    private static void clickFirstEnabled(Page gamePage, String selector, int timeoutMs, String debugName) {
        long deadline = System.currentTimeMillis() + timeoutMs;
        while (System.currentTimeMillis() < deadline) {
            try {
                Locator elements = gamePage.locator(selector);
                int count = elements.count();

                for (int i = 0; i < count; i++) {
                    Locator el = elements.nth(i);

                    if (!el.isVisible()) continue;
                    if (!el.isEnabled()) continue;

                    boolean clickable = (Boolean) el.evaluate("e => {" +
                            "const s = getComputedStyle(e);" +
                            "return s.display!=='none' && s.visibility!=='hidden' && " +
                            "s.pointerEvents!=='none' && e.offsetParent !== null;" +
                            "}");

                    if (!clickable) continue;

                    gamePage.waitForTimeout(300);

                    try {
                        el.scrollIntoViewIfNeeded();
                        el.click(new Locator.ClickOptions().setTimeout(2500));
                        System.out.println("‚úÖ –ö–ª–∏–∫ –ø–æ '" + debugName + "' –≤—ã–ø–æ–ª–Ω–µ–Ω (–æ–±—ã—á–Ω—ã–π)");
                        return;
                    } catch (PlaywrightException e1) {
                        System.out.println("‚ö†Ô∏è –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: " + e1.getMessage());
                        try {
                            el.click(new Locator.ClickOptions().setTimeout(1500).setForce(true));
                            System.out.println("‚úÖ –ö–ª–∏–∫ –ø–æ '" + debugName + "' –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ force()");
                            return;
                        } catch (Exception e2) {
                            el.evaluate("node => node.dispatchEvent(new MouseEvent('click', {bubbles:true}))");
                            System.out.println("‚úÖ –ö–ª–∏–∫ –ø–æ '" + debugName + "' –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ JS");
                            return;
                        }
                    }
                }
            } catch (Throwable ignore) {}
            gamePage.waitForTimeout(500);
        }
        throw new RuntimeException("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ '" + debugName + "' –∑–∞ " + timeoutMs + " –º—Å");
    }

// === –•–ï–õ–ü–ï–†–´, –ö–û–¢–û–†–´–ï –í–´–ó–´–í–ê–ï–¢ –¢–ï–°–¢ ===

    // –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ä—Ç–æ—á–∫–∏; –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî fallback –ø–æ —á–∞—Å—Ç–∏ href
    private static Page openGameFromLobbyByName(Page originPage, String gameName, String hrefContainsFallback) {
        System.out.println("üéÆ –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä—É: " + gameName);
        Locator card = originPage.locator("div.tile__cell img[alt*='" + gameName + "']").first();
        if (card.count() == 0)
            card = originPage.locator("div.tile__cell:has(:text('" + gameName + "'))").first();

        // –ø—Ä–æ–∫—Ä—É—Ç–∫–∞, –µ—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –≤–Ω–µ —ç–∫—Ä–∞–Ω–∞
        for (int i = 0; i < 12 && (card.count() == 0 || !card.isVisible()); i++) {
            originPage.evaluate("window.scrollBy(0, 600)");
            originPage.waitForTimeout(300);
        }

        // –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –ø–æ href
        if (card.count() == 0 && hrefContainsFallback != null) {
            Locator link = originPage.locator("a[href*='" + hrefContainsFallback + "']").first();
            if (link.count() > 0) return clickCardMaybeOpensNewTab(link.first());
        }
        if (card.count() == 0) throw new RuntimeException("–ù–µ –Ω–∞—à–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä—ã: " + gameName);
        return clickCardMaybeOpensNewTab(card.first());
    }

    // –ü—Ä–æ–π—Ç–∏ –≤–æ–∑–º–æ–∂–Ω—ã–π —Ç—É—Ç–æ—Ä–∏–∞–ª –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
    private static void passTutorialIfPresent(Page gamePage) {
        for (int i = 0; i < 6; i++) {
            try {
                Locator next = gamePage.locator("button:has-text('–î–∞–ª–µ–µ'), div[role='button']:has-text('–î–∞–ª–µ–µ')");
                if (next.count() == 0 || !next.first().isVisible()) break;
                next.first().scrollIntoViewIfNeeded();
                next.first().click(new Locator.ClickOptions().setTimeout(2000));
                gamePage.waitForTimeout(150);
            } catch (RuntimeException ignore) { break; }
        }
        try {
            Locator understood = gamePage.locator("button:has-text('–Ø –≤—Å—ë –ø–æ–Ω—è–ª'), div[role='button']:has-text('–Ø –≤—Å—ë –ø–æ–Ω—è–ª')");
            if (understood.count() > 0 && understood.first().isVisible()) {
                understood.first().click(new Locator.ClickOptions().setTimeout(2000));
            }
        } catch (RuntimeException ignore) {}
    }

    // –í—ã—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É 50 (—á–∏–ø –∏–ª–∏ –∏–Ω–ø—É—Ç)
    private static void setStake50(Page gamePage) {
        try {
            Locator chip50 = gamePage.locator("div.chip-text:has-text('50'), button:has-text('50')");
            if (chip50.count() > 0 && chip50.first().isVisible()) {
                chip50.first().scrollIntoViewIfNeeded();
                chip50.first().click(new Locator.ClickOptions().setTimeout(3000));
                System.out.println("‚úÖ –§–∏—à–∫–∞ 50 –≤—ã–±—Ä–∞–Ω–∞");
                return;
            }
        } catch (Throwable ignore) {}
        try {
            Locator input = gamePage.locator("input[type='text'], input[type='number']");
            if (input.count() > 0) {
                input.first().click();
                input.first().fill("50");
                System.out.println("‚úÖ –í–≤–µ–ª–∏ 50 –≤—Ä—É—á–Ω—É—é");
            }
        } catch (Throwable e) {
            System.out.println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å 50: " + e.getMessage());
        }
    }

    // –î–æ–∂–¥–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ —Ä–∞—É–Ω–¥ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –∏ —Å–Ω–æ–≤–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞–≤–∫–∏
    private static void waitRoundToSettle(Page gamePage, int maxMs) {
        long start = System.currentTimeMillis();
        while (System.currentTimeMillis() - start < maxMs) {
            try {
                Locator again = gamePage.locator(
                        "button:has-text('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É'), div:has-text('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É'), div.market-button"
                );
                if (again.count() > 0 && again.first().isVisible()) {
                    boolean clickable = (Boolean) again.first().evaluate("el => {" +
                            "const s = getComputedStyle(el);" +
                            "return !el.closest('[disabled]') && s.visibility!=='hidden' && s.display!=='none' && s.pointerEvents!=='none';" +
                            "}");
                    if (clickable) {
                        System.out.println("[DEBUG] –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω ‚úÖ");
                        return;
                    }
                }
            } catch (Throwable ignore) {}
            gamePage.waitForTimeout(250);
        }
        System.out.println("‚ö†Ô∏è –†–∞—É–Ω–¥ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ " + maxMs + " –º—Å ‚Äî –∏–¥—ë–º –¥–∞–ª—å—à–µ.");
    }

    // –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–æ–±–±–∏: –µ—Å–ª–∏ –∏–≥—Ä–∞ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ ‚Äî –∑–∞–∫—Ä—ã—Ç—å; –µ—Å–ª–∏ –≤ —Ç–æ–π –∂–µ ‚Äî –ù–∞–∑–∞–¥/–∏—Å—Ç–æ—Ä–∏—è
    private static void backToLobby(Page gamePage) {
        try {
            if (!gamePage.equals(page)) {
                System.out.println("‚¨ÖÔ∏è –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –∏–≥—Ä—ã");
                gamePage.close();
                page.bringToFront();
            } else {
                if (gamePage.locator("button:has-text('–ù–∞–∑–∞–¥')").count() > 0)
                    gamePage.locator("button:has-text('–ù–∞–∑–∞–¥')").first().click(new Locator.ClickOptions().setTimeout(2500));
                else
                    gamePage.evaluate("history.back()");
            }
        } catch (Throwable e) {
            System.out.println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ: " + e.getMessage());
            try { gamePage.evaluate("history.back()"); } catch (Throwable ignore) {}
        }
        // —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –ª–æ–±–±–∏ –ø–æ—è–≤–∏–ª–∏—Å—å
        page.waitForLoadState(LoadState.NETWORKIDLE);
        page.waitForSelector("div.tile__cell img, div.tile__cell",
                new Page.WaitForSelectorOptions().setTimeout(15000).setState(WaitForSelectorState.VISIBLE));
        page.waitForTimeout(800);
        System.out.println("‚¨ÖÔ∏è –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ª–æ–±–±–∏ ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä –ø–æ—è–≤–∏–ª–∏—Å—å ‚úÖ");
    }


    @AfterAll
    static void tearDownAll() {
        System.out.println("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ (–±—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞—ë—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º)");
    }
}
