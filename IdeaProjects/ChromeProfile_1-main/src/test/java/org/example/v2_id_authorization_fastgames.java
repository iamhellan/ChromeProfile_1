package org.example;

import com.microsoft.playwright.*;
import com.microsoft.playwright.options.AriaRole;
import com.microsoft.playwright.options.LoadState;
import com.microsoft.playwright.options.MouseButton;
import com.microsoft.playwright.options.WaitForSelectorState;
import org.junit.jupiter.api.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.function.BiFunction;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * –ü–æ–ª–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
 * - 1xbet –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –ß–ò–°–¢–û–ú –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
 * - Google Messages –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ persistent –ø—Ä–æ—Ñ–∏–ª—å Chrome –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * - –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
 * - –ù–∞–¥—ë–∂–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è, JS‚Äë–∫–ª–∏–∫–∏ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
 * - –ë—Ä–∞—É–∑–µ—Ä –≤ –∫–æ–Ω—Ü–µ –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
 *
 * –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: Playwright 1.48.0+, JUnit 5, JDK 24, IntelliJ IDEA CE 2025.1.3
 */
public class v2_id_authorization_fastgames {
    static Playwright playwright;
    static Browser browser;
    static BrowserContext xContext; // —á–∏—Å—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è 1xbet
    static Page page;
    static TelegramNotifier tg;

    // ---- –¶–≤–µ—Ç–Ω—ã–µ –ª–æ–≥–∏ ----
    static void log(String text) { System.out.println("\u001B[37m" + text + "\u001B[0m"); }
    static void info(String text) { System.out.println("\u001B[36m‚ÑπÔ∏è  " + text + "\u001B[0m"); }
    static void success(String text) { System.out.println("\u001B[32m‚úÖ " + text + "\u001B[0m"); }
    static void warn(String text) { System.out.println("\u001B[33m‚ö†Ô∏è  " + text + "\u001B[0m"); }
    static void error(String text) { System.out.println("\u001B[31m‚ùå " + text + "\u001B[0m"); }
    static void section(String name) { System.out.println("\n\u001B[45m===== " + name.toUpperCase() + " =====\u001B[0m"); }

    // ---- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π ----
    // –ü—É—Ç—å –ø—Ä–æ—Ñ–∏–ª—è Chrome (—Ä–∞–±–æ—á–∏–π –Ω–æ—É—Ç ‚Äî –∏–∑ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    static final Path WORK_CHROME_PROFILE = Paths.get("C:\\Users\\b.zhantemirov\\AppData\\Local\\Google\\Chrome\\User Data\\Default");

    @BeforeAll
    static void setUpAll() {
        playwright = Playwright.create();
        browser = playwright.chromium().launch(new BrowserType.LaunchOptions()
                .setHeadless(false)
                .setArgs(List.of("--start-maximized", "--window-size=1920,1080", "--enable-webgl")));

        // –ß–∏—Å—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è 1xbet
        Browser.NewContextOptions xOptions = new Browser.NewContextOptions().setViewportSize(null);
        xContext = browser.newContext(xOptions);
        page = xContext.newPage();

        // Telegram notifier
        tg = new TelegramNotifier(ConfigHelper.get("telegram.bot.token"), ConfigHelper.get("telegram.chat.id"));
        success("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –≥–æ—Ç–æ–≤—ã");
    }

    @AfterAll
    static void tearDownAll() {
        success("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ (–±—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞—ë—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º)");
    }

    // ========================= –û–°–ù–û–í–ù–û–ô –¢–ï–°–¢ =========================
    @Test
    void loginAndPlayFastGames() {
        tg.sendMessage("üöÄ *–¢–µ—Å—Ç v2_id_authorization_fastgames* —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª (1xbet ‚Äî —á–∏—Å—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, Messages ‚Äî persistent)");
        try {
            // --- –û–¢–ö–†–´–¢–ò–ï –°–ê–ô–¢–ê –ò –í–•–û–î ---
            section("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è");
            log("–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç 1xbet.kz");
            page.navigate("https://1xbet.kz/");
            page.evaluate("window.moveTo(0,0); window.resizeTo(screen.width, screen.height);");

            System.out.println("–ñ–º—ë–º '–í–æ–π—Ç–∏' –≤ —à–∞–ø–∫–µ");
            page.waitForTimeout(1000);
            page.click("button#login-form-call");

            System.out.println("–í–≤–æ–¥–∏–º ID");
            String login = org.example.ConfigHelper.get("login");
            page.fill("input#auth_id_email", login);

            System.out.println("–í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å");
            String password = org.example.ConfigHelper.get("password");
            page.fill("input#auth-form-password", password);

            System.out.println("–ñ–º—ë–º '–í–æ–π—Ç–∏' –≤ —Ñ–æ—Ä–º–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
            page.locator("button.auth-button:has-text('–í–æ–π—Ç–∏')").click();

            // ---- –ñ–î–Å–ú –†–ï–®–ï–ù–ò–Ø –ö–ê–ü–ß–ò ----
            System.out.println("–¢–µ–ø–µ—Ä—å —Ä–µ—à–∞–π –∫–∞–ø—á—É –≤—Ä—É—á–Ω—É—é ‚Äî —è –∂–¥—É –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–í—ã—Å–ª–∞—Ç—å –∫–æ–¥' (–¥–æ 10 –º–∏–Ω—É—Ç)...");
            page.waitForSelector("button.phone-sms-modal-content__send",
                    new Page.WaitForSelectorOptions()
                            .setTimeout(600_000)
                            .setState(WaitForSelectorState.VISIBLE)
            );
            System.out.println("–ö–Ω–æ–ø–∫–∞ '–í—ã—Å–ª–∞—Ç—å –∫–æ–¥' –ø–æ—è–≤–∏–ª–∞—Å—å ‚úÖ");

            System.out.println("–ñ–º—ë–º '–í—ã—Å–ª–∞—Ç—å –∫–æ–¥'");
            Locator sendCodeButton = page.locator("button:has-text('–í—ã—Å–ª–∞—Ç—å –∫–æ–¥')");
            try {
                sendCodeButton.click();
                System.out.println("–ö–Ω–æ–ø–∫–∞ '–í—ã—Å–ª–∞—Ç—å –∫–æ–¥' –Ω–∞–∂–∞—Ç–∞ ‚úÖ");
            } catch (Exception e) {
                System.out.println("–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ JS...");
                page.evaluate("document.querySelector(\"button:has-text('–í—ã—Å–ª–∞—Ç—å –∫–æ–¥')\")?.click()");
            }

            System.out.println("–¢–µ–ø–µ—Ä—å —Ä–µ—à–∞–π –∫–∞–ø—á—É –≤—Ä—É—á–Ω—É—é ‚Äî —è –∂–¥—É –ø–æ–ª–µ –¥–ª—è –∫–æ–¥–∞ (–¥–æ 10 –º–∏–Ω—É—Ç)...");
            page.waitForSelector("input.phone-sms-modal-code__input",
                    new Page.WaitForSelectorOptions()
                            .setTimeout(600_000)
                            .setState(WaitForSelectorState.VISIBLE)
            );
            System.out.println("–ü–æ–ª–µ –¥–ª—è –∫–æ–¥–∞ –ø–æ—è–≤–∏–ª–æ—Å—å! –î–æ—Å—Ç–∞—ë–º –∫–æ–¥ –∏–∑ Google Messages...");

            // ======= PERSISTENT GOOGLE MESSAGES (—á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å Chrome) =======
            section("Google Messages (—á–µ—Ä–µ–∑ persistent –ø—Ä–æ—Ñ–∏–ª—å)");
            if (!Files.exists(WORK_CHROME_PROFILE)) {
                warn("–ü—É—Ç—å –∫ –ø—Ä–æ—Ñ–∏–ª—é Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω: " + WORK_CHROME_PROFILE + " ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.");
            }
            BrowserContext messagesCtx = playwright.chromium().launchPersistentContext(
                    WORK_CHROME_PROFILE,
                    new BrowserType.LaunchPersistentContextOptions()
                            .setHeadless(false)
                            .setArgs(List.of("--start-maximized", "--disable-notifications"))
            );

            Page msgPage = messagesCtx.newPage();
            msgPage.navigate("https://messages.google.com/web/conversations");
            msgPage.waitForTimeout(4000);

            log("–ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Ç");
            Locator chat = msgPage.locator("mws-conversation-list-item").first();
            chat.click();
            msgPage.waitForTimeout(2000);

            Locator messages = msgPage.locator("mws-message-part-content div.text-msg-content div.text-msg.msg-content div.ng-star-inserted");
            int count = messages.count();
            if (count == 0) throw new RuntimeException("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π!");
            String sms = messages.nth(count - 1).innerText();
            log("–ü–æ—Å–ª–µ–¥–Ω–µ–µ SMS: " + sms);

            Matcher m = Pattern.compile("\\b([0-9]{4,8}|[A-Za-z0-9]{6,8})\\b").matcher(sms);
            String code = m.find() ? m.group() : null;
            if (code == null) throw new RuntimeException("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–¥ –∏–∑ SMS!");
            log("–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: " + code);

            msgPage.close();
            page.bringToFront();

            // ---- –í–í–û–î–ò–ú –ö–û–î –ò –ü–û–î–¢–í–ï–†–ñ–î–ê–ï–ú ----
            log("–í–≤–æ–¥–∏–º –∫–æ–¥ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—Ö–æ–¥");
            page.fill("input.phone-sms-modal-code__input", code);
            robustClick(page, page.locator("button:has-text('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')").first(), 6000, "confirm-sms");
            success("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ");

            // ========================= –ë–´–°–¢–†–´–ï –ò–ì–†–´ =========================
            section("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ë—ã—Å—Ç—Ä—ã–µ –∏–≥—Ä—ã");
            page.waitForTimeout(1200);
            robustClick(page, page.locator("a.header-menu-nav-list-item__link.main-item:has-text('–ë—ã—Å—Ç—Ä—ã–µ –∏–≥—Ä—ã')").first(), 6000, "fast-games");

            // === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–∫–∏ ===
            BiFunction<Page, String, Boolean> tryBetButton = (gamePage, selector) -> {
                info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞–≤–∫–∏: " + selector);
                long start = System.currentTimeMillis();

                while (System.currentTimeMillis() - start < 30000) {
                    Locator button = gamePage.locator(selector);
                    if (button.count() > 0) {
                        Locator btn = button.first();
                        if (btn.isVisible()) {
                            boolean clickable = false;
                            try {
                                clickable = (Boolean) btn.evaluate(
                                        "el => {" +
                                                "const style = window.getComputedStyle(el);" +
                                                "return !el.classList.contains('disabled') &&" +
                                                "!el.classList.contains('pointer-events-none') &&" +
                                                "style.display !== 'none' &&" +
                                                "style.visibility !== 'hidden' &&" +
                                                "style.opacity !== '0' &&" +
                                                "!el.closest('[style*=\"display:none\"]');" +
                                                "}"
                                );
                            } catch (Throwable ignore) {}

                            if (clickable) {
                                success("–ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –¥–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É");
                                try {
                                    btn.scrollIntoViewIfNeeded();
                                    btn.click(new Locator.ClickOptions()
                                            .setTimeout(2000)
                                            .setForce(true));
                                } catch (Throwable e) {
                                    warn("–û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ JS");
                                    try {
                                        gamePage.evaluate("el => el.dispatchEvent(new MouseEvent('click', {bubbles:true}))", btn.elementHandle());
                                    } catch (Throwable e2) {
                                        error("–û—à–∏–±–∫–∞ –ø—Ä–∏ JS-–∫–ª–∏–∫–µ: " + e2.getMessage());
                                    }
                                }

                                gamePage.waitForTimeout(600);
                                waitRoundToSettle(gamePage, 30000);
                                return true;
                            }
                        }
                    }
                    gamePage.waitForTimeout(400);
                }
                warn("–ö–Ω–æ–ø–∫–∞ —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å –∑–∞ 30 —Å–µ–∫ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É");
                return false;
            };

            // === –ö—Ä—ç—à-–ë–æ–∫—Å ===
            section("–ö—Ä—ç—à-–ë–æ–∫—Å");
            log("–ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫—É '–ö—Ä—ç—à-–ë–æ–∫—Å' (—á–µ—Ä–µ–∑ href) –≤ —Ñ—Ä–µ–π–º–∞—Ö");

// --- –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ ---
            Frame gamesFrame = findFrameWithSelector(page, "a.game[href*='crash-boxing']", 8000);
            if (gamesFrame == null)
                gamesFrame = findFrameWithSelector(page, "p.game-name:has-text('–ö—Ä—ç—à-–ë–æ–∫—Å')", 12000);

            if (gamesFrame == null) {
                for (Frame fx : page.frames()) {
                    if (fx.locator("a.game[href*='crash-boxing']").count() > 0) {
                        gamesFrame = fx;
                        break;
                    }
                }
            }

            if (gamesFrame == null) {
                List<Frame> frames = page.frames();
                System.out.println("[DEBUG] –§—Ä–µ–π–º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:");
                for (Frame f : frames) System.out.println(" - " + f.url());
                throw new RuntimeException("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫—É '–ö—Ä—ç—à-–ë–æ–∫—Å' –Ω–∏ –≤ –æ–¥–Ω–æ–º iframe");
            }

            Locator crashCard = gamesFrame.locator("a.game[href*='crash-boxing']").first();
            crashCard.waitFor(new Locator.WaitForOptions().setTimeout(20000).setState(WaitForSelectorState.VISIBLE));

            log("–ö–ª–∏–∫–∞–µ–º –ø–æ –ö—Ä—ç—à-–ë–æ–∫—Å");
            Page gamePage = clickCardMaybeOpensNewTab(crashCard);
            gamePage.waitForTimeout(2500);

// --- –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–≥—Ä—ã ---
            log("–ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–≥—Ä—ã (–¥–æ 25 —Å–µ–∫)");
            boolean gameReady = false;
            for (int i = 0; i < 50; i++) {
                if (gamePage.locator("text=–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É").count() > 0 ||
                        gamePage.locator(".contest-panel-outcome-button").count() > 0) {
                    gameReady = true;
                    break;
                }
                gamePage.waitForTimeout(500);
            }
            if (!gameReady) {
                ScreenshotHelper.take(gamePage, "crashbox_not_loaded");
                throw new RuntimeException("‚ùå –ò–≥—Ä–∞ '–ö—Ä—ç—à-–ë–æ–∫—Å' –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –≤–æ–≤—Ä–µ–º—è");
            }

            passTutorialIfPresent(gamePage);

// --- –í–≤–æ–¥ —Å—É–º–º—ã –≤—Ä—É—á–Ω—É—é ---
            log("–í–≤–æ–¥–∏–º —Å—É–º–º—É –≤—Ä—É—á–Ω—É—é: 50 KZT");
            try {
                Locator amountInput = gamePage.locator("input[type='text'], input[type='number']").first();
                if (amountInput.count() > 0 && amountInput.isVisible()) {
                    amountInput.click();
                    amountInput.fill("50");
                    log("‚úÖ –°—É–º–º–∞ 50 –≤–≤–µ–¥–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é");
                } else {
                    gamePage.evaluate("document.querySelector('input[type=text],input[type=number]')?.value='50'");
                    log("‚ö†Ô∏è –ü–æ–ª–µ —Å—É–º–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ JS");
                }
            } catch (Exception e) {
                log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—É–º–º—ã: " + e.getMessage());
            }

// --- –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞–≤–∫–∏ ---
            log("–ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É '–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É'");
            String[] selectors = {
                    "button:has-text('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É')",
                    "div.contest-panel-outcome-button:has-text('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É')",
                    "text=–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É"
            };

            boolean betMade = false;
            for (String s : selectors) {
                try {
                    Locator btn = gamePage.locator(s).first();
                    btn.waitFor(new Locator.WaitForOptions().setTimeout(8000).setState(WaitForSelectorState.VISIBLE));
                    if (btn.isVisible()) {
                        btn.scrollIntoViewIfNeeded();
                        btn.click(new Locator.ClickOptions().setForce(true));
                        success("–°—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–∞ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: " + s);
                        betMade = true;
                        break;
                    }
                } catch (Throwable ignored) {}
            }

            if (!betMade) {
                ScreenshotHelper.take(gamePage, "crashbox_no_button");
                throw new RuntimeException("‚ùå –ö–Ω–æ–ø–∫–∞ '–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞");
            }

            waitRoundToSettle(gamePage, 25000);
            success("–ö—Ä—ç—à-–ë–æ–∫—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ");

            // ===== –ù–∞—Ä–¥—ã =====
            section("–ù–∞—Ä–¥—ã");
            Page nardsPage = openGameByHrefContains(gamePage, "nard", "–ù–∞—Ä–¥—ã");
            nardsPage.waitForTimeout(600);
            passTutorialIfPresent(nardsPage);
            setStake50ViaChip(nardsPage);
            log("–í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥: –°–∏–Ω–∏–π");
            clickFirstEnabled(nardsPage, "span[role='button'][data-market='dice'][data-outcome='blue']", 20000);
            waitRoundToSettle(nardsPage, 25000);

            // ===== –î–∞—Ä—Ç—Å =====
            section("–î–∞—Ä—Ç—Å");
            Page dartsPage = openGameByHrefContains(nardsPage, "darts?cid", "–î–∞—Ä—Ç—Å");
            dartsPage.waitForTimeout(600);
            passTutorialIfPresent(dartsPage);
            setStake50ViaChip(dartsPage);
            log("–í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥ (1-4-5-6-9-11-15-16-17-19)");
            clickFirstEnabled(dartsPage, "span[role='button'][data-market='1-4-5-6-9-11-15-16-17-19']", 20000);
            waitRoundToSettle(dartsPage, 25000);

            // ===== –î–∞—Ä—Ç—Å - –§–æ—Ä—Ç—É–Ω–∞ =====
            section("–î–∞—Ä—Ç—Å - –§–æ—Ä—Ç—É–Ω–∞");
            Page dartsFortunePage = openGameByHrefContains(dartsPage, "darts-fortune", "–î–∞—Ä—Ç—Å - –§–æ—Ä—Ç—É–Ω–∞");
            dartsFortunePage.waitForTimeout(600);
            passTutorialIfPresent(dartsFortunePage);
            setStake50ViaChip(dartsFortunePage);
            log("–í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥: ONE_TO_EIGHT (–°–µ–∫—Ç–æ—Ä 1-8)");
            clickFirstEnabled(dartsFortunePage, "div[data-outcome='ONE_TO_EIGHT']", 20000);
            waitRoundToSettle(dartsFortunePage, 25000);

            // ===== –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ =====
            section("–ë–æ–ª—å—à–µ / –ú–µ–Ω—å—à–µ");
            Page hiloPage = openGameByHrefContains(dartsFortunePage, "darts-hilo", "–ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ");
            hiloPage.waitForTimeout(600);
            passTutorialIfPresent(hiloPage);
            setStake50ViaChip(hiloPage);
            log("–í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥: –ë–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ (>=16)");
            clickFirstEnabledAny(hiloPage, new String[]{
                    "div[role='button'][data-market='THROW_RESULT'][data-outcome='gte-16']",
                    "div.board-market-hi-eq:has-text('–ë–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ')"
            }, 45000);
            waitRoundToSettle(hiloPage, 30000);

            // ===== –ë—É–ª–ª–∏—Ç—ã NHL21 =====
            section("–ë—É–ª–ª–∏—Ç—ã NHL21");
            Page shootoutPage = openGameByHrefContains(hiloPage, "shootout", "–ë—É–ª–ª–∏—Ç—ã NHL21");
            shootoutPage.waitForTimeout(800);
            passTutorialIfPresent(shootoutPage);
            setStake50ViaChip(shootoutPage);
            log("–í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥: –î–∞");
            clickFirstEnabled(shootoutPage, "div[role='button'].market-button:has-text('–î–∞')", 45000);
            waitRoundToSettle(shootoutPage, 35000);

            // ===== –ë–æ–∫—Å (—É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞) =====
            section("–ë–æ–∫—Å");
            Page boxingPage = openUniqueBoxingFromHub(shootoutPage);
            boxingPage.waitForTimeout(600);
            passTutorialIfPresent(boxingPage);
            setStake50ViaChip(boxingPage);
            log("–í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥: –±–æ–∫—Å—ë—Ä ‚Ññ1 (–ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞)");
            boxingPage.waitForSelector("div.contest-panel", new Page.WaitForSelectorOptions().setTimeout(15000));
            boolean betDone = tryBetButton.apply(boxingPage,
                    "div.contest-panel-outcome-button:has-text('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É'), " +
                            "button.contest-panel-outcome-button:has-text('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É'), " +
                            "div[role='button'].contest-panel-outcome-button:has-text('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É')");
            if (!betDone) {
                warn("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –≤ '–ë–æ–∫—Å' ‚Äî –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–∞ –Ω–æ–≤–∞—è DOM-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–≥—Ä—ã.");
                info("–°–æ–≤–µ—Ç: –ø—Ä–æ–≤–µ—Ä—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ devtools (div.contest-panel-outcome-button –∏–ª–∏ button.outcome-button)");
            }

            success("–í—Å–µ –±—ã—Å—Ç—Ä—ã–µ –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã ‚úÖ");

            // --- –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢ + –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã—Ö–æ–¥ ---
            section("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –≤—ã—Ö–æ–¥");
            log("–û—Ç–∫—Ä—ã–≤–∞–µ–º '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'");
            page.waitForTimeout(1000);
            robustClick(page, page.locator("a.header-lk-box-link[title='–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç']").first(), 5000, "lk-open");

            log("–ü—Ä–æ–±—É–µ–º –∑–∞–∫—Ä—ã—Ç—å popup‚Äë–∫—Ä–µ—Å—Ç–∏–∫ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –õ–ö (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)");
            try {
                Locator closeCrossLk = page.locator("div.box-modal_close.arcticmodal-close");
                closeCrossLk.waitFor(new Locator.WaitForOptions().setTimeout(2000).setState(WaitForSelectorState.ATTACHED));
                if (closeCrossLk.isVisible()) {
                    closeCrossLk.click();
                    success("–ö—Ä–µ—Å—Ç–∏–∫ –≤ –õ–ö –Ω–∞–π–¥–µ–Ω –∏ –Ω–∞–∂–∞—Ç ‚úÖ");
                } else {
                    info("–ö—Ä–µ—Å—Ç–∏–∫–∞ –≤ –õ–ö –Ω–µ—Ç ‚Äî –∏–¥—ë–º –¥–∞–ª—å—à–µ");
                }
            } catch (Exception e) { info("–í—Å–ø–ª—ã–≤–∞—à–∫–∏ –≤ –õ–ö –Ω–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"); }

            log("–ñ–º—ë–º '–í—ã—Ö–æ–¥'");
            page.waitForTimeout(1000);
            robustClick(page, page.locator("a.ap-left-nav__item_exit").first(), 5000, "lk-logout");

            log("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã—Ö–æ–¥ –∫–Ω–æ–ø–∫–æ–π '–û–ö'");
            page.waitForTimeout(1000);
            robustClick(page, page.locator("button.swal2-confirm.swal2-styled").first(), 5000, "logout-ok");

            success("–í—ã—Ö–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ (–±—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞—ë—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º)");
            tg.sendMessage("‚úÖ *v2_id_authorization_fastgames* –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ (–æ–±–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)");
        } catch (Exception e) {
            error("–û—à–∏–±–∫–∞: " + e.getMessage());
            ScreenshotHelper.take(page, "error");
            tg.sendMessage("üö® –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ v2_id_authorization_fastgames: " + e.getMessage());
            Assertions.fail(e);
        }
    }

    // ========================= –•–ï–õ–ü–ï–†–´ =========================

    /** JS‚Äë–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∏–∫ —Å –∑–∞–ø–∞—Å–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º */
    static void robustClick(Page p, Locator target, long timeoutMs, String name) {
        long start = System.currentTimeMillis();
        Throwable last = null;
        while (System.currentTimeMillis() - start < timeoutMs) {
            try {
                if (target.count() > 0 && target.first().isVisible()) {
                    target.first().scrollIntoViewIfNeeded();
                    target.first().click(new Locator.ClickOptions().setTimeout(1500));
                    return;
                }
            } catch (Throwable t) { last = t; }
            try {
                // JS‚Äë–∫–ª–∏–∫
                if (target.count() > 0) {
                    p.evaluate("el => el.dispatchEvent(new MouseEvent('click', {bubbles:true}))", target.first().elementHandle());
                    return;
                }
            } catch (Throwable t) { last = t; }
            p.waitForTimeout(200);
        }
        throw new RuntimeException("robustClick(" + name + ") –Ω–µ —É–¥–∞–ª–æ—Å—å: " + (last != null ? last.getMessage() : "unknown"));
    }

    /** –ñ–¥—ë–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—É–Ω–¥–∞ (—Ñ–æ–ª–±—ç–∫: —Ç–∞–π–º–∞—É—Ç –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–ø–∏–Ω–Ω–µ—Ä–æ–≤, —Ç–æ—Å—Ç–æ–≤ –∏ —Ç.–ø.) */
    static void waitRoundToSettle(Page p, long maxWaitMs) {
        long start = System.currentTimeMillis();
        while (System.currentTimeMillis() - start < maxWaitMs) {
            try {
                boolean busy = p.locator(".loading, .spinner, .preloader, [aria-busy='true']").isVisible();
                if (!busy) { p.waitForLoadState(LoadState.NETWORKIDLE); break; }
            } catch (Throwable ignore) {}
            p.waitForTimeout(300);
        }
    }

    /** –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç—É—Ç–æ—Ä–∏–∞–ª—ã, –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –º–æ–¥–∞–ª–∫–∏, –µ—Å–ª–∏ –≤—Å–ø–ª—ã–ª–∏ */
    static void passTutorialIfPresent(Page p) {
        String[] closeSelectors = new String[]{
                "button:has-text('–ü–æ–Ω—è—Ç–Ω–æ')",
                "button:has-text('–î–∞–ª–µ–µ')",
                "button:has-text('OK')",
                "button.tutorial-close",
                ".modal-close, .popup-close, .arcticmodal-close, .close, [aria-label='Close']"
        };
        for (String sel : closeSelectors) {
            try {
                Locator loc = p.locator(sel).first();
                if (loc.count() > 0 && loc.isVisible()) {
                    loc.click(new Locator.ClickOptions().setTimeout(800));
                    p.waitForTimeout(400);
                }
            } catch (Throwable ignore) {}
        }
    }

    /** –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π iframe, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç selector, –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è */
    static Frame findFrameWithSelector(Page p, String selector, int timeoutMs) {
        long end = System.currentTimeMillis() + timeoutMs;
        while (System.currentTimeMillis() < end) {
            for (Frame f : p.frames()) {
                try {
                    if (f.locator(selector).count() > 0) return f;
                } catch (Throwable ignore) {}
            }
            p.waitForTimeout(200);
        }
        return null;
    }

    /** –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ –∏–≥—Ä—ã; –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã–ª–∞—Å—å –Ω–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ ‚Äî –≤–µ—Ä–Ω—ë–º –µ—ë, –∏–Ω–∞—á–µ —Ç–µ–∫—É—â—É—é */
    static Page clickCardMaybeOpensNewTab(Locator card) {
        Page current = card.page();
        try {
            Page newPage = current.waitForPopup(() -> {
                try {
                    card.first().click(new Locator.ClickOptions().setButton(MouseButton.LEFT).setTimeout(2000));
                } catch (Throwable t) {
                    // –∑–∞–ø–∞—Å–Ω–æ–π JS‚Äë–∫–ª–∏–∫
                    current.evaluate("el => el.dispatchEvent(new MouseEvent('click', {bubbles:true}))", card.first().elementHandle());
                }
            });
            return newPage != null ? newPage : current;
        } catch (Throwable ignore) {
            // –í–µ—Ä–æ—è—Ç–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ —Ç–æ–º –∂–µ —Ç–∞–±–µ
            try { card.first().click(new Locator.ClickOptions().setTimeout(1500).setForce(true)); } catch (Throwable ignored) {}
            return current;
        }
    }

    /** –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä—É –∏–∑ —Ö–∞–±–∞ –ø–æ —á–∞—Å—Ç–∏ href –∏ –∏–º–µ–Ω–∏ (–¥–ª—è –ª–æ–≥–æ–≤) */
    static Page openGameByHrefContains(Page fromPage, String hrefPart, String humanName) {
        log("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∏–≥—Ä—É '" + humanName + "'");
        Frame f = findFrameWithSelector(fromPage, "a[href*='" + hrefPart + "']", 8000);
        if (f == null) {
            // –∑–∞–ø–∞—Å–Ω–æ–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
            f = findFrameWithSelector(fromPage, "p.game-name:has-text('" + humanName + "')", 12000);
        }
        if (f == null) throw new RuntimeException("–ù–µ –Ω–∞—à–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä—ã: " + humanName);

        Locator link = f.locator("a[href*='" + hrefPart + "']").first();
        if (link.count() == 0) link = f.locator("p.game-name:has-text('" + humanName + "')").locator("xpath=ancestor::a").first();

        return clickCardMaybeOpensNewTab(link);
    }

    /** –û—Ç–∫—Ä—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π '–ë–æ–∫—Å' (DOM –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è) */
    static Page openUniqueBoxingFromHub(Page fromPage) {
        String[] variants = new String[] { "boxing", "box", "crash-boxing" };
        for (String v : variants) {
            try { return openGameByHrefContains(fromPage, v, "–ë–æ–∫—Å"); } catch (Throwable ignore) {}
        }
        // –∑–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å: –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        Frame f = findFrameWithSelector(fromPage, "p.game-name:has-text('–ë–æ–∫—Å')", 10000);
        if (f == null) throw new RuntimeException("–ö–∞—Ä—Ç–æ—á–∫–∞ '–ë–æ–∫—Å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        Locator link = f.locator("p.game-name:has-text('–ë–æ–∫—Å')").locator("xpath=ancestor::a").first();
        return clickCardMaybeOpensNewTab(link);
    }

    /** –°—Ç–∞–≤–∏–º —Å—Ç–∞–≤–∫—É 50 —á–µ—Ä–µ–∑ —á–∏–ø—ã —Å –Ω–æ–º–∏–Ω–∞–ª–æ–º */
    static void setStake50ViaChip(Page p) {
        String[] chips = new String[]{
                "button:has-text('50')",
                "span:has-text('50')",
                "div.chip:has-text('50')",
                "[data-amount='50']",
        };
        for (String sel : chips) {
            try {
                Locator chip = p.locator(sel).first();
                if (chip.count() > 0 && chip.isVisible()) {
                    robustClick(p, chip, 2000, "chip-50");
                    log("–°—É–º–º–∞ 50 –≤—ã–±—Ä–∞–Ω–∞ —á–∏–ø–æ–º");
                    return;
                }
            } catch (Throwable ignore) {}
        }
        warn("–ß–∏–ø '50' –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é");
        try {
            Locator input = p.locator("input[type='text'], input[type='number']").first();
            if (input.count() > 0) { input.fill("50"); }
        } catch (Throwable ignore) {}
    }

    /** –ö–ª–∏–∫ –ø–æ –ø–µ—Ä–≤–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É –∏—Å—Ö–æ–¥—É */
    static void clickFirstEnabled(Page p, String selector, long timeoutMs) {
        long end = System.currentTimeMillis() + timeoutMs;
        Throwable last = null;
        while (System.currentTimeMillis() < end) {
            try {
                Locator loc = p.locator(selector).first();
                if (loc.count() > 0 && loc.isVisible()) {
                    robustClick(p, loc, 2000, "market-" + selector);
                    return;
                }
            } catch (Throwable t) { last = t; }
            p.waitForTimeout(200);
        }
        throw new RuntimeException("–ö–Ω–æ–ø–∫–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞/–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞: " + selector + (last != null ? ("; last=" + last.getMessage()) : ""));
    }

    /** –ö–ª–∏–∫ –ø–æ –ø–µ—Ä–≤–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É –∏—Å—Ö–æ–¥—É –∏–∑ –Ω–∞–±–æ—Ä–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ */
    static void clickFirstEnabledAny(Page p, String[] selectors, long timeoutMs) {
        long end = System.currentTimeMillis() + timeoutMs;
        while (System.currentTimeMillis() < end) {
            for (String s : selectors) {
                try {
                    Locator loc = p.locator(s).first();
                    if (loc.count() > 0 && loc.isVisible()) {
                        robustClick(p, loc, 1500, "market-any");
                        return;
                    }
                } catch (Throwable ignore) {}
            }
            p.waitForTimeout(200);
        }
        throw new RuntimeException("–ù–∏ –æ–¥–∏–Ω –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: " + Arrays.toString(selectors));
    }

    // ========================= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ö–õ–ê–°–°–´ =========================

    /** –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—á—Ç–µ–Ω–∏–µ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤/–æ–∫—Ä—É–∂–µ–Ω–∏—è, –∏–Ω–∞—á–µ –∏–∑ config.properties —Ä—è–¥–æ–º —Å –ø—Ä–æ–µ–∫—Ç–æ–º) */
    static class ConfigHelper {
        static final Properties props = new Properties();
        static {
            try {
                Path p = Paths.get("config.properties");
                if (Files.exists(p)) {
                    try (var in = Files.newInputStream(p)) { props.load(in); }
                }
            } catch (Exception ignore) {}
        }
        static String get(String key) {
            String v = System.getProperty(key);
            if (v != null && !v.isBlank()) return v;
            v = System.getenv(key.replace('.', '_').toUpperCase(Locale.ROOT));
            if (v != null && !v.isBlank()) return v;
            v = props.getProperty(key);
            return v != null ? v : "";
        }
    }

    /** –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Telegram‚Äë–Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ (–ø–∏—à–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å; HTTP‚Äë–æ—Ç–ø—Ä–∞–≤–∫—É –¥–æ–±–∞–≤–∏—Ç–µ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏) */
    static class TelegramNotifier {
        final String token;
        final String chatId;
        TelegramNotifier(String token, String chatId) { this.token = token; this.chatId = chatId; }
        void sendMessage(String text) {
            System.out.println("[TG] " + text);
            // –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ HTTP
        }
    }

    /** –°–∫—Ä–∏–Ω—à–æ—Ç—ã –≤ –ø–∞–ø–∫—É ./screenshots */
    static class ScreenshotHelper {
        static void take(Page p, String name) {
            try {
                Path dir = Paths.get("screenshots");
                if (!Files.exists(dir)) Files.createDirectories(dir);
                String ts = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));
                Path path = dir.resolve(name + "_" + ts + ".png");
                p.screenshot(new Page.ScreenshotOptions().setPath(path).setFullPage(true));
                System.out.println("–°–∫—Ä–∏–Ω—à–æ—Ç: " + path.toAbsolutePath());
            } catch (Exception e) { System.out.println("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: " + e.getMessage()); }
        }
    }
}

