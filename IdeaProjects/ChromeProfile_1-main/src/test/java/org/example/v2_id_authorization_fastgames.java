package org.example;

import com.microsoft.playwright.*;
import com.microsoft.playwright.options.AriaRole;
import com.microsoft.playwright.options.LoadState;
import com.microsoft.playwright.options.WaitForSelectorState;
import org.junit.jupiter.api.*;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.function.BiFunction;

public class v2_id_authorization_fastgames {
    // ====== –ü–æ–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Å–µ—Ä–≤–∏—Å–æ–≤ =======================================================
    static Playwright playwright;
    static BrowserContext context; // persistent context
    static Page page;
    static TelegramNotifier tg;

    // ====== –¶–≤–µ—Ç–Ω—ã–µ –ª–æ–≥–∏ ====================================================================
    static void log(String text) {
        System.out.println("\u001B[37m" + text + "\u001B[0m");
    }
    static void info(String text) {
        System.out.println("\u001B[36m‚ÑπÔ∏è  " + text + "\u001B[0m");
    }
    static void success(String text) {
        System.out.println("\u001B[32m‚úÖ " + text + "\u001B[0m");
    }
    static void warn(String text) {
        System.out.println("\u001B[33m‚ö†Ô∏è  " + text + "\u001B[0m");
    }
    static void error(String text) {
        System.out.println("\u001B[31m‚ùå " + text + "\u001B[0m");
    }
    static void section(String name) {
        System.out.println("\n\u001B[45m===== " + name.toUpperCase() + " =====\u001B[0m");
    }

    // ====== –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—ã –∏ –∑–∞–ø—É—Å–∫ persistent Chrome ====================================
    private static String detectEnvironment() {
        String workPath = ConfigHelper.get("chrome.profile.work");
        String homePath = ConfigHelper.get("chrome.profile.home");

        try {
            if (workPath != null && new java.io.File(workPath).exists()) {
                System.out.println("üåê –°—Ä–µ–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: WORK ‚Üí " + workPath);
                return "work";
            }
        } catch (Throwable ignored) {}
        try {
            if (homePath != null && new java.io.File(homePath).exists()) {
                System.out.println("üè† –°—Ä–µ–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: HOME ‚Üí " + homePath);
                return "home";
            }
        } catch (Throwable ignored) {}

        System.out.println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ä–µ–¥—É ‚Üí fallback: WORK");
        return "work";
    }

    private static Path resolveChromeProfilePath(String env) {
        String workPath = ConfigHelper.get("chrome.profile.work");
        String homePath = ConfigHelper.get("chrome.profile.home");
        if ("work".equals(env) && workPath != null) return Paths.get(workPath);
        if ("home".equals(env) && homePath != null) return Paths.get(homePath);
        // –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ –∫–ª—é—á–∏ –ø—É—Å—Ç—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–π
        if (workPath != null) return Paths.get(workPath);
        if (homePath != null) return Paths.get(homePath);
        throw new RuntimeException("–ù–µ –∑–∞–¥–∞–Ω—ã –ø—É—Ç–∏ chrome.profile.work / chrome.profile.home –≤ config.properties");
    }

    @BeforeAll
    static void setUpAll() {
        playwright = Playwright.create();

        String env = detectEnvironment();
        Path chromeProfilePath = resolveChromeProfilePath(env);

        info("–ó–∞–ø—É—Å–∫–∞–µ–º Chromium –≤ persistent-–ø—Ä–æ—Ñ–∏–ª–µ: " + chromeProfilePath);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º persistent context, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω–æ–º—É Google Messages
        context = playwright.chromium().launchPersistentContext(
                chromeProfilePath,
                new BrowserType.LaunchPersistentContextOptions()
                        .setHeadless(false)
                        .setArgs(Arrays.asList(
                                "--start-maximized",
                                "--window-size=1920,1080"
                        ))
                        .setViewportSize(null) // –≤–æ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        );

        page = context.newPage();

        // Telegram
        String botToken = ConfigHelper.get("telegram.bot.token");
        String chatId = ConfigHelper.get("telegram.chat.id");
        tg = new TelegramNotifier(botToken, chatId);

        success("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ");
    }

    // ====== –£—Ç–∏–ª–∏—Ç—ã Playwright ===============================================================

    private com.microsoft.playwright.Frame findFrameWithSelector(Page p, String selector, int timeoutMs) {
        long deadline = System.currentTimeMillis() + timeoutMs;
        while (System.currentTimeMillis() < deadline) {
            try {
                // –û–±—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–µ –≤–∫–ª–∞–¥–∫–∏)
                for (Page pg : p.context().pages()) {
                    for (com.microsoft.playwright.Frame f : pg.frames()) {
                        try {
                            if (f.locator(selector).count() > 0) {
                                System.out.println("[DEBUG] –ù–∞—à–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –≤–æ —Ñ—Ä–µ–π–º–µ: " + f.url());
                                return f;
                            }
                        } catch (Throwable ignore) {}
                    }
                }
            } catch (Throwable ignore) {}
            p.waitForTimeout(300);
        }
        return null;
    }

    private Locator smartLocator(Page p, String selector, int timeoutMs) {
        try {
            Locator direct = p.locator(selector);
            if (direct.count() > 0) return direct;
        } catch (Throwable ignore) {}

        com.microsoft.playwright.Frame f = findFrameWithSelector(p, selector, timeoutMs);
        if (f != null) return f.locator(selector);
        throw new RuntimeException("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –Ω–∏ –≤–æ —Ñ—Ä–µ–π–º–∞—Ö: " + selector);
    }

    private void robustClick(Page p, Locator loc, int timeoutMs, String debugName) {
        long deadline = System.currentTimeMillis() + timeoutMs;
        RuntimeException lastErr = null;

        while (System.currentTimeMillis() < deadline) {
            try {
                loc.first().scrollIntoViewIfNeeded();
                loc.first().click(new Locator.ClickOptions().setTimeout(2500));
                return;
            } catch (RuntimeException e1) {
                lastErr = e1;
                String msg = e1.getMessage() == null ? "" : e1.getMessage();

                boolean intercept = msg.contains("intercepts pointer events")
                        || msg.contains("element is not receiving pointer events")
                        || msg.contains("is not visible");

                if (intercept) {
                    info("'" + debugName + "': –ø–µ—Ä–µ—Ö–≤–∞—Ç –∫–ª–∏–∫–∞/–Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å. –ü—Ä–æ–±—É–µ–º force –∏–ª–∏ JS.");
                    try {
                        loc.first().click(new Locator.ClickOptions().setTimeout(1500).setForce(true));
                        return;
                    } catch (Throwable ignore) {}
                    try {
                        loc.first().evaluate("el => el.dispatchEvent(new MouseEvent('click', {bubbles:true}))");
                        return;
                    } catch (Throwable ignore) {}
                }
            }
            p.waitForTimeout(200);
        }
        if (lastErr != null) throw lastErr;
        throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ '" + debugName + "' –∑–∞ " + timeoutMs + "ms");
    }

    private void clickFirstEnabled(Page p, String selector, int timeoutMs) {
        Locator loc = smartLocator(p, selector, timeoutMs);
        robustClick(p, loc.first(), timeoutMs, selector);
    }

    private void clickFirstEnabledAny(Page p, String[] selectors, int timeoutMs) {
        long deadline = System.currentTimeMillis() + timeoutMs;
        while (System.currentTimeMillis() < deadline) {
            for (String sel : selectors) {
                try {
                    clickFirstEnabled(p, sel, 1500);
                    return;
                } catch (Throwable ignore) {}
            }
            p.waitForTimeout(150);
        }
        throw new RuntimeException("–ù–µ –Ω–∞—à–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤!");
    }

    private Page clickCardMaybeOpensNewTab(Locator card) {
        int before = context.pages().size();
        robustClick(page, card, 30000, "game-card");
        page.waitForTimeout(600);
        int after = context.pages().size();
        if (after > before) {
            Page newPage = context.pages().get(after - 1);
            newPage.bringToFront();
            System.out.println("[DEBUG] –ò–≥—Ä–∞ –æ—Ç–∫—Ä—ã–ª–∞—Å—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ: " + newPage.url());
            return newPage;
        }
        System.out.println("[DEBUG] –ò–≥—Ä–∞ –æ—Ç–∫—Ä—ã–ª–∞—Å—å –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ/—Ñ—Ä–µ–π–º–µ");
        return page;
    }

    private void passTutorialIfPresent(Page gamePage) {
        // –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø—Ä–æ—Ö–æ–¥ –ø–æ ¬´–î–∞–ª–µ–µ¬ª
        for (int i = 1; i <= 5; i++) {
            try {
                Locator nextBtn = gamePage.locator("div[role='button']:has-text('–î–∞–ª–µ–µ')");
                if (nextBtn.count() == 0 || !nextBtn.first().isVisible()) break;
                robustClick(gamePage, nextBtn.first(), 1500, "–î–∞–ª–µ–µ");
                gamePage.waitForTimeout(150);
            } catch (Throwable ignore) { break; }
        }
        // ¬´–Ø –≤—Å—ë –ø–æ–Ω—è–ª¬ª
        try {
            Locator understood = gamePage.locator("div[role='button']:has-text('–Ø –≤—Å—ë –ø–æ–Ω—è–ª')");
            if (understood.count() > 0 && understood.first().isVisible()) {
                robustClick(gamePage, understood.first(), 1500, "–Ø –≤—Å—ë –ø–æ–Ω—è–ª");
            }
        } catch (Throwable ignore) {}
    }

    private void setStake50ViaChip(Page gamePage) {
        System.out.println("–í—ã–±–∏—Ä–∞–µ–º —á–∏–ø 50 KZT");

        // [MODIFIED] ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–ø–∞—Å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
        String[] possibleSelectors = new String[]{
                "div.chip-text:has-text('50')",
                "span.chip__value:has-text('50')",
                "div.chip-value:has-text('‚Ç∏50')",
                "button:has-text('50')"
        };

        Locator chip50 = null;
        for (String sel : possibleSelectors) {
            try {
                chip50 = smartLocator(gamePage, sel, 2000);
                if (chip50 != null && chip50.count() > 0) {
                    System.out.println("[DEBUG] –ù–∞–π–¥–µ–Ω —á–∏–ø –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: " + sel);
                    break;
                }
            } catch (Throwable ignore) {}
        }

        if (chip50 == null || chip50.count() == 0)
            throw new RuntimeException("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —á–∏–ø 50 KZT –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤");

        robustClick(gamePage, chip50.first(), 8000, "chip-50");
    }

    // –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è –º–µ–∂–¥—É —Ä–∞—É–Ω–¥–∞–º–∏
    private void waitRoundToSettle(Page gamePage, int maxMs) {
        long start = System.currentTimeMillis();
        boolean roundStarted = false;

        while (System.currentTimeMillis() - start < maxMs) {
            try {
                Locator anyBet = gamePage.locator("div[role='button'][data-market][data-outcome]:has-text('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É')");
                if (anyBet.count() > 0 && anyBet.first().isVisible()) {
                    boolean enabled = (Boolean) anyBet.first().evaluate("e => !(e.classList && e.classList.contains('pointer-events-none'))");
                    if (enabled) {
                        System.out.println("[DEBUG] –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º ‚úÖ");
                        roundStarted = true;
                        break;
                    }
                }

                if (System.currentTimeMillis() - start > 60000 && !roundStarted) {
                    warn("–ò–≥—Ä–∞ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –±–æ–ª–µ–µ 60 —Å–µ–∫ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏ –∏–¥—ë–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ.");
                    return;
                }
            } catch (Throwable ignore) {}
            gamePage.waitForTimeout(300);
        }

        if (!roundStarted) {
            warn("–†–∞—É–Ω–¥ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ " + (maxMs / 1000) + " —Å–µ–∫ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è.");
        }
    }

    private Page openGameByHrefContains(Page originPage, String hrefContains, String fallbackMenuText) {
        com.microsoft.playwright.Frame f = findFrameWithSelector(originPage, "a[href*='" + hrefContains + "']", 7000);
        if (f == null && fallbackMenuText != null) {
            f = findFrameWithSelector(originPage, "span.text-hub-header-game-title:has-text('" + fallbackMenuText + "')", 7000);
        }
        if (f == null) throw new RuntimeException("–ù–µ –Ω–∞—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É: " + hrefContains);
        Locator link = f.locator("a[href*='" + hrefContains + "']");
        if (link.count() == 0 && fallbackMenuText != null) {
            link = f.locator("span.text-hub-header-game-title:has-text('" + fallbackMenuText + "')").locator("xpath=ancestor::a");
        }
        return clickCardMaybeOpensNewTab(link.first());
    }

    private Page openUniqueBoxingFromHub(Page originPage) {
        String innerSpan = "a.menu-sports-item-inner[href*='productId=boxing'][href*='cid=1xbetkz'] span.text-hub-header-game-title:has-text('–ë–æ–∫—Å')";
        com.microsoft.playwright.Frame f = findFrameWithSelector(originPage, innerSpan, 8000);
        if (f == null) throw new RuntimeException("‚ùå –ù–µ –Ω–∞—à–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É '–ë–æ–∫—Å'");
        Locator link = f.locator(innerSpan).locator("xpath=ancestor::a");
        return clickCardMaybeOpensNewTab(link.first());
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—ë—Ä—Ç–∫–∞-–±–ª–æ–∫ –¥–ª—è –º–∏–Ω–∏-—Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–≥—Ä
    private void playSafe(String gameName, Runnable action) {
        try {
            action.run();
        } catch (Exception e) {
            warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ '" + gameName + "': " + e.getMessage());
            String screenshot = ScreenshotHelper.takeScreenshot(page, "skip_" + gameName);
            info("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É '" + gameName + "' –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...");
            try {
                if (screenshot != null) tg.sendPhoto(screenshot, "–°–∫—Ä–∏–Ω—à–æ—Ç: –æ—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ " + gameName);
            } catch (Throwable ignored) {}
        }
    }

    // ====== Google Messages —á–µ—Ä–µ–∑ persistent-–∫–æ–Ω—Ç–µ–∫—Å—Ç ========================================

    private String extractCodeFromGoogleMessages() {
        log("üîê –û—Ç–∫—Ä—ã–≤–∞–µ–º Google Messages –≤ —Ç–µ–∫—É—â–µ–º persistent-–∫–æ–Ω—Ç–µ–∫—Å—Ç–µ");
        Page messagesPage = context.newPage();
        messagesPage.navigate("https://messages.google.com/web/conversations");
        messagesPage.waitForLoadState(LoadState.DOMCONTENTLOADED);
        messagesPage.waitForTimeout(3000);

        // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ welcome-—Å—Ç—Ä–∞–Ω–∏—Ü—É (–Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        if (messagesPage.url().contains("welcome")) {
            messagesPage.close();
            throw new RuntimeException("‚ö†Ô∏è Google Messages –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ. " +
                    "–ó–∞–π–¥–∏ –æ–¥–∏–Ω —Ä–∞–∑ –≤—Ä—É—á–Ω—É—é –≤ —ç—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª–µ –∏ –ø—Ä–∏–≤—è–∂–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.");
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è" ‚Üí –∫–Ω–æ–ø–∫–∞ ¬´–û–±–Ω–æ–≤–∏—Ç—å¬ª
        try {
            Locator refreshButton = messagesPage.locator("button:has-text('–û–±–Ω–æ–≤–∏—Ç—å')");
            if (refreshButton.isVisible()) {
                info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è' ‚Üí –∂–º—ë–º '–û–±–Ω–æ–≤–∏—Ç—å'");
                try {
                    refreshButton.click();
                } catch (Throwable e) {
                    info("–û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ JS");
                    messagesPage.evaluate("document.querySelector('button.refresh-button')?.click()");
                }
                info("–ñ–¥—ë–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤...");
                boolean reconnected = false;
                for (int i = 0; i < 20; i++) {
                    if (messagesPage.locator("mws-conversation-list-item").count() > 0) {
                        reconnected = true;
                        break;
                    }
                    messagesPage.waitForTimeout(1000);
                }
                if (reconnected) success("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
                else warn("–ü–æ—Å–ª–µ '–û–±–Ω–æ–≤–∏—Ç—å' —á–∞—Ç—ã –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å");
            }
        } catch (Throwable e) {
            warn("–ü—Ä–æ–≤–µ—Ä–∫–∞ '–û–±–Ω–æ–≤–∏—Ç—å' –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π: " + e.getMessage());
        }

        // –£—Å—Ç–æ–π—á–∏–≤–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —á–∞—Ç–æ–≤
        info("–ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤...");
        boolean chatsLoaded = false;
        for (int i = 0; i < 20; i++) {
            if (messagesPage.locator("mws-conversation-list-item").count() > 0) {
                chatsLoaded = true;
                break;
            }
            messagesPage.waitForTimeout(1000);
        }
        if (!chatsLoaded) {
            messagesPage.close();
            throw new RuntimeException("‚ùå –ß–∞—Ç—ã –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤ Google Messages");
        }
        success("–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω");

        // –ò—â–µ–º —á–∞—Ç 1xBet, –∏–Ω–∞—á–µ –≤–µ—Ä—Ö–Ω–∏–π
        Locator chat = messagesPage.locator("mws-conversation-list-item:has-text('1xbet'), mws-conversation-list-item:has-text('1xbet-kz')");
        if (chat.count() == 0) {
            warn("–ß–∞—Ç 1xBet –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä—ë–º –≤–µ—Ä—Ö–Ω–∏–π —á–∞—Ç");
            chat = messagesPage.locator("mws-conversation-list-item").first();
        }
        robustClick(messagesPage, chat.first(), 3000, "chat-open");
        messagesPage.waitForTimeout(2000);

        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã
        info("–ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ");
        Locator messageNodes = messagesPage.locator("div.text-msg-content div.text-msg.msg-content div.ng-star-inserted");
        int count = 0;
        for (int i = 0; i < 15; i++) {
            count = messageNodes.count();
            if (count > 0) break;
            messagesPage.waitForTimeout(1000);
        }
        if (count == 0) {
            messagesPage.close();
            throw new RuntimeException("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞");
        }
        String lastMessageText = messageNodes.nth(count - 1).innerText().trim();
        log("üì® –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: " + lastMessageText);

        // –ü–∞—Ä—Å–∏–º –∫–æ–¥: —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã 4‚Äì8 —Å–∏–º–≤–æ–ª–æ–≤
        Matcher m = Pattern.compile("\\b([0-9]{4,8}|[A-Za-z0-9]{4,8})\\b").matcher(lastMessageText);
        String code = m.find() ? m.group() : null;
        if (code == null) {
            messagesPage.close();
            throw new RuntimeException("‚ùå –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏");
        }
        success("–ò–∑–≤–ª–µ—á—ë–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: " + code);

        try {
            tg.sendMessage("üì¨ –ö–æ–¥ –∏–∑ Google Messages: *" + code + "*");
        } catch (Throwable ignored) {}

        messagesPage.close();
        page.bringToFront();
        return code;
    }

    // ====== –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç ====================================================================
    @Test
    void loginAndPlayFastGames() {
        long startTime = System.currentTimeMillis();
        tg.sendMessage("üöÄ *–¢–µ—Å—Ç v2_id_authorization_fastgames* —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ ID + Google Messages –≤ persistent –ø—Ä–æ—Ñ–∏–ª–µ)");

        try {
            // ---------- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ----------
            section("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ ID");
            log("–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç 1xbet.kz");
            page.navigate("https://1xbet.kz/");
            page.evaluate("window.moveTo(0,0); window.resizeTo(screen.width, screen.height);");

            // ======= –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º =======
            section("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
            page.waitForLoadState(LoadState.DOMCONTENTLOADED);
            page.waitForTimeout(1500);

            boolean alreadyLoggedIn = page.locator("a.header-lk-box-link[title='–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç']").isVisible();

            if (alreadyLoggedIn) {
                success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚úÖ");
                tg.sendMessage("‚öôÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ '–ë—ã—Å—Ç—Ä—ã–º –∏–≥—Ä–∞–º'");
            } else {
                log("–ñ–º—ë–º '–í–æ–π—Ç–∏' –≤ —à–∞–ø–∫–µ");
                page.waitForTimeout(800);
                page.click("button#login-form-call");

                String login = ConfigHelper.get("login");
                String password = ConfigHelper.get("password");
                log("–í–≤–æ–¥–∏–º ID –∏ –ø–∞—Ä–æ–ª—å –∏–∑ config.properties");

                page.fill("input#auth_id_email", login);
                page.fill("input#auth-form-password", password);
                page.click("button.auth-button.auth-button--block.auth-button--theme-secondary");

                // –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è ¬´–í—ã—Å–ª–∞—Ç—å –∫–æ–¥¬ª, —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–º ¬´–∫–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ / —Ñ–æ—Ä–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–∞¬ª
                log("–ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ '–í—ã—Å–ª–∞—Ç—å –∫–æ–¥' (–¥–æ 10 –º–∏–Ω)");
                page.waitForSelector("button:has-text('–í—ã—Å–ª–∞—Ç—å –∫–æ–¥')",
                        new Page.WaitForSelectorOptions().setTimeout(600000).setState(WaitForSelectorState.VISIBLE));

                log("–ñ–º—ë–º '–í—ã—Å–ª–∞—Ç—å –∫–æ–¥'");
                Locator sendCodeButton = page.locator("button:has-text('–í—ã—Å–ª–∞—Ç—å –∫–æ–¥')");
                try {
                    sendCodeButton.click();
                    log("–ö–Ω–æ–ø–∫–∞ '–í—ã—Å–ª–∞—Ç—å –∫–æ–¥' –Ω–∞–∂–∞—Ç–∞");
                } catch (Throwable e) {
                    warn("–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º force/JS");
                    try {
                        sendCodeButton.click(new Locator.ClickOptions().setForce(true));
                    } catch (Throwable e2) {
                        page.evaluate("document.querySelector(\"button:has-text('–í—ã—Å–ª–∞—Ç—å –∫–æ–¥')\")?.dispatchEvent(new MouseEvent('click', {bubbles:true}))");
                    }
                }

                log("–ñ–¥—ë–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ (–¥–æ 10 –º–∏–Ω)");
                page.waitForSelector("input.phone-sms-modal-code__input",
                        new Page.WaitForSelectorOptions().setTimeout(600000).setState(WaitForSelectorState.VISIBLE));

                // ---------- Google Messages ----------
                section("Google Messages");
                String code = extractCodeFromGoogleMessages();

                log("–í–≤–æ–¥–∏–º –∫–æ–¥ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—Ö–æ–¥");
                page.fill("input.phone-sms-modal-code__input", code);
                page.click("button:has-text('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')");
                page.waitForTimeout(1000);
                success("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ");
            }

            // ====== –ë–´–°–¢–†–´–ï –ò–ì–†–´ ======
            section("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ë—ã—Å—Ç—Ä—ã–µ –∏–≥—Ä—ã");
            page.waitForTimeout(1200);
            page.click("a.header-menu-nav-list-item__link.main-item:has-text('–ë—ã—Å—Ç—Ä—ã–µ –∏–≥—Ä—ã')");

            // === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–∫–∏ ===
            BiFunction<Page, String, Boolean> tryBetButton = (gamePage, selector) -> {
                info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞–≤–∫–∏: " + selector);
                long start = System.currentTimeMillis();

                while (System.currentTimeMillis() - start < 30000) {
                    Locator button = gamePage.locator(selector);
                    if (button.count() > 0) {
                        Locator btn = button.first();
                        if (btn.isVisible()) {
                            boolean clickable = false;
                            try {
                                clickable = (Boolean) btn.evaluate(
                                        "el => {" +
                                                "const style = window.getComputedStyle(el);" +
                                                "return !el.classList.contains('disabled') &&" +
                                                "!el.classList.contains('pointer-events-none') &&" +
                                                "style.display !== 'none' &&" +
                                                "style.visibility !== 'hidden' &&" +
                                                "style.opacity !== '0' &&" +
                                                "!el.closest('[style*=\"display:none\"]');" +
                                                "}"
                                );
                            } catch (Throwable ignore) {}

                            if (clickable) {
                                success("–ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –¥–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É");
                                try {
                                    btn.scrollIntoViewIfNeeded();
                                    btn.click(new Locator.ClickOptions()
                                            .setTimeout(2000)
                                            .setForce(true));
                                } catch (Throwable e) {
                                    warn("–û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ JS");
                                    try {
                                        gamePage.evaluate("el => el.dispatchEvent(new MouseEvent('click', {bubbles:true}))", btn.elementHandle());
                                    } catch (Throwable e2) {
                                        error("–û—à–∏–±–∫–∞ –ø—Ä–∏ JS-–∫–ª–∏–∫–µ: " + e2.getMessage());
                                    }
                                }

                                gamePage.waitForTimeout(600);
                                waitRoundToSettle(gamePage, 30000);
                                return true;
                            }
                        }
                    }
                    gamePage.waitForTimeout(400);
                }
                warn("–ö–Ω–æ–ø–∫–∞ —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å –∑–∞ 30 —Å–µ–∫ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É");
                return false;
            };

            // === –ö—Ä—ç—à-–ë–æ–∫—Å ===
            section("–ö—Ä—ç—à-–ë–æ–∫—Å");
            log("–ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫—É '–ö—Ä—ç—à-–ë–æ–∫—Å' (—á–µ—Ä–µ–∑ href) –≤ —Ñ—Ä–µ–π–º–∞—Ö");

// --- –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ ---
            com.microsoft.playwright.Frame gamesFrame = findFrameWithSelector(page, "a.game[href*='crash-boxing']", 8000);
            if (gamesFrame == null) {
                gamesFrame = findFrameWithSelector(page, "p.game-name:has-text('–ö—Ä—ç—à-–ë–æ–∫—Å')", 12000);
            }
            if (gamesFrame == null) {
                for (com.microsoft.playwright.Frame fx : page.frames()) {
                    if (fx.locator("a.game[href*='crash-boxing']").count() > 0) {
                        gamesFrame = fx;
                        break;
                    }
                }
            }
            if (gamesFrame == null) {
                List<com.microsoft.playwright.Frame> frames = page.frames();
                System.out.println("[DEBUG] –§—Ä–µ–π–º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:");
                for (com.microsoft.playwright.Frame f : frames) System.out.println(" - " + f.url());
                throw new RuntimeException("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫—É '–ö—Ä—ç—à-–ë–æ–∫—Å' –Ω–∏ –≤ –æ–¥–Ω–æ–º iframe");
            }

            Locator crashByHref = gamesFrame.locator("a.game[href*='crash-boxing']");
            Locator crashByText = gamesFrame.locator("p.game-name:has-text('–ö—Ä—ç—à-–ë–æ–∫—Å')").locator("xpath=ancestor::a");
            Locator crashCard = crashByHref.count() > 0 ? crashByHref : crashByText;

            log("–ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ DOM");
            crashCard.waitFor(new Locator.WaitForOptions().setTimeout(20000).setState(WaitForSelectorState.ATTACHED));

            log("–ö–ª–∏–∫–∞–µ–º –ø–æ –ö—Ä—ç—à-–ë–æ–∫—Å");
            Page gamePage = clickCardMaybeOpensNewTab(crashCard);
            gamePage.waitForTimeout(800);

            passTutorialIfPresent(gamePage);

// --- –í–≤–æ–¥ —Å—É–º–º—ã –≤—Ä—É—á–Ω—É—é ---
            log("–í–≤–æ–¥–∏–º —Å—É–º–º—É –≤—Ä—É—á–Ω—É—é: 50 KZT");
            try {
                Locator amountInput = gamePage.locator("input[type='text'][value]").first();

                if (amountInput.count() > 0 && amountInput.isVisible()) {
                    amountInput.click();
                    amountInput.fill("50");
                    log("‚úÖ –°—É–º–º–∞ 50 –≤–≤–µ–¥–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é –≤ –ø–æ–ª–µ —Å—Ç–∞–≤–∫–∏");
                } else {
                    log("‚ö†Ô∏è –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ JS");
                    gamePage.evaluate("() => { const el = document.querySelector('input[type=text],input[type=number]'); if (el) el.value = '50'; }");
                }
            } catch (Exception e) {
                log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—É–º–º—ã –≤—Ä—É—á–Ω—É—é: " + e.getMessage());
            }

            gamePage.waitForTimeout(800);

// --- –ü–µ—Ä–≤–∞—è —Å—Ç–∞–≤–∫–∞ ---
            log("–°—Ç–∞–≤–∫–∞ 50 KZT (yes)");
            clickFirstEnabled(gamePage,
                    "div[role='button'][data-market='hit_met_condition'][data-outcome='yes']:has-text('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É')",
                    30000);

            gamePage.waitForTimeout(1500);

// --- –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞ ---
            waitRoundToSettle(gamePage, 60000);

            // ===== –ù–∞—Ä–¥—ã =====
            section("–ù–∞—Ä–¥—ã");
            log("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∏–≥—Ä—É '–ù–∞—Ä–¥—ã'");
            Page nardsPage = openGameByHrefContains(gamePage, "nard", "–ù–∞—Ä–¥—ã");
            nardsPage.waitForTimeout(600);
            passTutorialIfPresent(nardsPage);
            setStake50ViaChip(nardsPage);
            log("–í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥: –°–∏–Ω–∏–π");
            clickFirstEnabled(nardsPage, "span[role='button'][data-market='dice'][data-outcome='blue']", 20000);
            waitRoundToSettle(nardsPage, 60000);

            // ===== –î–∞—Ä—Ç—Å =====
            section("–î–∞—Ä—Ç—Å");
            log("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∏–≥—Ä—É '–î–∞—Ä—Ç—Å'");
            Page dartsPage = openGameByHrefContains(nardsPage, "darts?cid", "–î–∞—Ä—Ç—Å");
            dartsPage.waitForTimeout(600);
            passTutorialIfPresent(dartsPage);
            setStake50ViaChip(dartsPage);
            log("–í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥ (1-4-5-6-9-11-15-16-17-19)");
            clickFirstEnabled(dartsPage, "span[role='button'][data-market='1-4-5-6-9-11-15-16-17-19']", 20000);
            waitRoundToSettle(dartsPage, 60000);

            // ===== –î–∞—Ä—Ç—Å - –§–æ—Ä—Ç—É–Ω–∞ =====
            section("–î–∞—Ä—Ç—Å - –§–æ—Ä—Ç—É–Ω–∞");
            log("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∏–≥—Ä—É '–î–∞—Ä—Ç—Å - –§–æ—Ä—Ç—É–Ω–∞'");
            Page dartsFortunePage = openGameByHrefContains(dartsPage, "darts-fortune", "–î–∞—Ä—Ç—Å - –§–æ—Ä—Ç—É–Ω–∞");
            dartsFortunePage.waitForTimeout(600);
            passTutorialIfPresent(dartsFortunePage);
            setStake50ViaChip(dartsFortunePage);
            log("–í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥: ONE_TO_EIGHT (–°–µ–∫—Ç–æ—Ä 1-8)");
            clickFirstEnabled(dartsFortunePage, "div[data-outcome='ONE_TO_EIGHT']", 20000);
            waitRoundToSettle(dartsFortunePage, 60000);

            // ===== –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ =====
            section("–ë–æ–ª—å—à–µ / –ú–µ–Ω—å—à–µ");
            log("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∏–≥—Ä—É '–ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ'");
            Page hiloPage = openGameByHrefContains(dartsFortunePage, "darts-hilo", "–ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ");
            hiloPage.waitForTimeout(600);
            passTutorialIfPresent(hiloPage);
            setStake50ViaChip(hiloPage);
            log("–í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥: –ë–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ (>=16)");
            clickFirstEnabledAny(hiloPage, new String[]{
                    "div[role='button'][data-market='THROW_RESULT'][data-outcome='gte-16']",
                    "div.board-market-hi-eq:has-text('–ë–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ')"
            }, 45000);
            waitRoundToSettle(hiloPage, 60000);

            // ===== –ë—É–ª–ª–∏—Ç—ã NHL21 =====
            section("–ë—É–ª–ª–∏—Ç—ã NHL21");
            log("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∏–≥—Ä—É '–ë—É–ª–ª–∏—Ç—ã NHL21'");
            Page shootoutPage = openGameByHrefContains(hiloPage, "shootout", "–ë—É–ª–ª–∏—Ç—ã NHL21");
            shootoutPage.waitForTimeout(800);
            passTutorialIfPresent(shootoutPage);
            log("–ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å—É–º–º—ã (—á–∏–ø 50)");
            setStake50ViaChip(shootoutPage);
            log("–í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥: –î–∞");
            clickFirstEnabled(shootoutPage, "div[role='button'].market-button:has-text('–î–∞')", 45000);
            waitRoundToSettle(shootoutPage, 60000);

            // ===== –ë–æ–∫—Å (—É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞) =====
            section("–ë–æ–∫—Å");
            log("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∏–≥—Ä—É '–ë–æ–∫—Å' (—É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞)");

// [MODIFIED] ‚Äî –∏—â–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É <a> —Å productId=boxing
            String boxingSelector = "a.menu-sports-item-inner[href*='productId=boxing'][href*='cid=1xbetkz']";
            com.microsoft.playwright.Frame boxingFrame = findFrameWithSelector(shootoutPage, boxingSelector, 8000);
            if (boxingFrame == null) {
                warn("‚ùå –ù–µ –Ω–∞—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É '–ë–æ–∫—Å' (productId=boxing) ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ span-—Ç–µ–∫—Å—Ç–∞");
                boxingFrame = findFrameWithSelector(shootoutPage, "span.text-hub-header-game-title:has-text('–ë–æ–∫—Å')", 8000);
            }
            if (boxingFrame == null) {
                throw new RuntimeException("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫—É '–ë–æ–∫—Å' –Ω–∏ –ø–æ href, –Ω–∏ –ø–æ —Ç–µ–∫—Å—Ç—É");
            }

            Locator boxingLink = boxingFrame.locator(boxingSelector);
            if (boxingLink.count() == 0) {
                boxingLink = boxingFrame.locator("span.text-hub-header-game-title:has-text('–ë–æ–∫—Å')").locator("xpath=ancestor::a");
            }

            Page boxingPage = clickCardMaybeOpensNewTab(boxingLink.first());
            boxingPage.waitForLoadState(LoadState.NETWORKIDLE); // [MODIFIED] –∂–¥—ë–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            boxingPage.waitForTimeout(600);

            passTutorialIfPresent(boxingPage);
            setStake50ViaChip(boxingPage);

            log("–í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥: –±–æ–∫—Å—ë—Ä ‚Ññ1 (–ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞)");

// [MODIFIED] ‚Äî —É—Ç–æ—á–Ω—ë–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–∫–∏ —Å fallback-–∞–º–∏
            boxingPage.waitForSelector("div.contest-panel, div.contest, div.market-buttons",
                    new Page.WaitForSelectorOptions().setTimeout(15000));

            boolean betDone = tryBetButton.apply(boxingPage,
                    "button:has-text('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É'), " +
                            "div.contest-panel-outcome-button:has-text('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É'), " +
                            "div[role='button'].contest-panel-outcome-button:has-text('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É')");

            if (!betDone) {
                warn("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –≤ '–ë–æ–∫—Å' ‚Äî –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–∞ –Ω–æ–≤–∞—è DOM-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–≥—Ä—ã.");
                info("–°–æ–≤–µ—Ç: –ø—Ä–æ–≤–µ—Ä—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ devtools (button:has-text('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É') –∏–ª–∏ div.contest-panel-outcome-button)");
            }

            success("–ì–æ—Ç–æ–≤–æ ‚úÖ");

            // --- –ü–µ—Ä–µ—Ö–æ–¥ –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã—Ö–æ–¥ ---
            log("–û—Ç–∫—Ä—ã–≤–∞–µ–º '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'");
            page.waitForTimeout(1000);
            page.click("a.header-lk-box-link[title='–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç']");

            log("–ü—Ä–æ–±—É–µ–º –∑–∞–∫—Ä—ã—Ç—å popup-–∫—Ä–µ—Å—Ç–∏–∫ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –õ–ö (–µ—Å–ª–∏ –æ–Ω –≤–æ–æ–±—â–µ –µ—Å—Ç—å)");
            try {
                Locator closeCrossLk = page.locator("div.box-modal_close.arcticmodal-close");
                closeCrossLk.waitFor(new Locator.WaitForOptions().setTimeout(2000).setState(WaitForSelectorState.ATTACHED));
                if (closeCrossLk.isVisible()) {
                    closeCrossLk.click();
                    success("–ö—Ä–µ—Å—Ç–∏–∫ –≤ –õ–ö –Ω–∞–π–¥–µ–Ω –∏ –Ω–∞–∂–∞—Ç ‚úÖ");
                } else {
                    info("–ö—Ä–µ—Å—Ç–∏–∫–∞ –≤ –õ–ö –Ω–µ—Ç ‚Äî –∏–¥—ë–º –¥–∞–ª—å—à–µ");
                }
            } catch (Exception e) {
                info("–í—Å–ø–ª—ã–≤–∞—à–∫–∏ –≤ –õ–ö –∏–ª–∏ –∫—Ä–µ—Å—Ç–∏–∫–∞ –Ω–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏ –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ");
            }

            log("–ñ–º—ë–º '–í—ã—Ö–æ–¥'");
            page.waitForTimeout(1000);
            page.click("a.ap-left-nav__item_exit");

            log("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã—Ö–æ–¥ –∫–Ω–æ–ø–∫–æ–π '–û–ö'");
            page.waitForTimeout(1000);
            page.click("button.swal2-confirm.swal2-styled");

            success("–í—ã—Ö–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ (–±—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞—ë—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º)");

            long duration = (System.currentTimeMillis() - startTime) / 1000;
            tg.sendMessage(
                    "‚úÖ *v2_id_authorization_fastgames —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!*\n" +
                            "‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ ID ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n" +
                            "‚Ä¢ –ö–æ–¥ –∏–∑ Google Messages –ø–æ–ª—É—á–µ–Ω –∏–∑ persistent –ø—Ä–æ—Ñ–∏–ª—è\n" +
                            "‚Ä¢ –í—Å–µ –±—ã—Å—Ç—Ä—ã–µ –∏–≥—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã\n\n" +
                            "üïí –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: *" + duration + " —Å–µ–∫.*"
            );

        } catch (Exception e) {
            error("–û—à–∏–±–∫–∞: " + e.getMessage());
            String screenshot = ScreenshotHelper.takeScreenshot(page, "v2_id_authorization_fastgames_error");
            try {
                tg.sendMessage("üö® –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ *v2_id_authorization_fastgames*:\n" + e.getMessage());
                if (screenshot != null) tg.sendPhoto(screenshot, "–°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏");
            } catch (Throwable ignored) {}
            // –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –±—Ä–æ—Å–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —Ä–æ–Ω—è—Ç—å —Ä–∞–Ω–Ω–µ—Ä
        }
    }

    @AfterAll
    static void tearDownAll() {
        success("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ (–±—Ä–∞—É–∑–µ—Ä –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Å—Ç–∞—é—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏)");
        try { playwright.close(); } catch (Exception ignore) {}
    }

    // ====== –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —É—Ç–∏–ª–∏—Ç—ã ==========================================
    // –≠—Ç–∏ –º–µ—Ç–æ–¥—ã –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è, –Ω–æ –ø–æ–ª–µ–∑–Ω—ã –≤ –æ—Ç–ª–∞–¥–∫–µ.
    private void scrollSlowly(Page p, int steps, int deltaY, int pauseMs) {
        for (int i = 0; i < steps; i++) {
            try {
                p.mouse().wheel(0, deltaY);
                p.waitForTimeout(pauseMs);
            } catch (Throwable ignored) {}
        }
    }

    private void waitForNetworkIdle(Page p, int timeoutMs) {
        try {
            p.waitForLoadState(LoadState.NETWORKIDLE, new Page.WaitForLoadStateOptions().setTimeout(timeoutMs));
        } catch (Throwable ignored) {}
    }

    private void safeReload(Page p, int timeoutMs) {
        try {
            p.reload();
            waitForNetworkIdle(p, timeoutMs);
        } catch (Throwable ignored) {}
    }

    private void safeBringToFront(Page p) {
        try {
            p.bringToFront();
        } catch (Throwable ignored) {}
    }

    // –ù–µ–±–æ–ª—å—à–æ–π helper –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    private boolean isVisible(Locator loc) {
        try {
            return loc.count() > 0 && loc.first().isVisible();
        } catch (Throwable t) {
            return false;
        }
    }

    // ===== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π helper –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è iframe –∏–≥—Ä—ã =====
    private Frame waitForGameFrame(Page page, String gameKey, int timeoutMs) {
        long start = System.currentTimeMillis();
        while (System.currentTimeMillis() - start < timeoutMs) {
            for (Frame f : page.frames()) {
                String url = f.url();
                if (url != null && url.contains(gameKey)) {
                    success("[DEBUG] –ù–∞–π–¥–µ–Ω —Ñ—Ä–µ–π–º: " + url);
                    return f;
                }
            }
            page.waitForTimeout(500);
        }
        throw new RuntimeException("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ—Ä–µ–π–º –∏–≥—Ä—ã: " + gameKey);
    }
}
